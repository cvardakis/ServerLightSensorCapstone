{"ast":null,"code":"// ReactChartsLine.js\nimport React,{useState,useEffect}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer}from'recharts';import'./ReactChartsLine.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function LineGraph(){// Data and sensor selection state\nconst[data,setData]=useState([]);const[selectedSensors,setSelectedSensors]=useState([]);const[sensors,setSensors]=useState([]);// Available sensors list\n// State for the date range selection (local time)\nconst[startDate,setStartDate]=useState('');const[startTime,setStartTime]=useState('');const[endDate,setEndDate]=useState('');const[endTime,setEndTime]=useState('');// Flag to indicate that defaults have been set\nconst[initialized,setInitialized]=useState(false);const apiUrl=process.env.REACT_APP_API_URL||'http://localhost:8000';// Toggle function for sensor checkboxes (ensuring at least one sensor remains selected)\nconst toggleSensor=sensorId=>{setSelectedSensors(prevSelected=>{// If sensorId is already selected, check if it is the only one selected.\nif(prevSelected.includes(sensorId)){if(prevSelected.length===1){console.warn(\"At least one sensor must be selected.\");return prevSelected;}else{return prevSelected.filter(s=>s!==sensorId);}}else{// Otherwise, add it to the selection.\nreturn[...prevSelected,sensorId];}});};// Placeholder function for CSV download\nconst downloadCSV=()=>{console.log(\"CSV download initiated (placeholder)\");};// Function to update graph data based on filters\nconst updateGraph=async()=>{try{// Build query parameters using URLSearchParams\nconst params=new URLSearchParams();if(selectedSensors.length>0){// Join multiple sensor IDs with commas\nparams.append('sensor',selectedSensors.join(','));}if(startDate)params.append('startDate',startDate);if(startTime)params.append('startTime',startTime);if(endDate)params.append('endDate',endDate);if(endTime)params.append('endTime',endTime);const fetchUrl=`${apiUrl}/sensorData/filter?${params.toString()}`;console.log(\"Fetching filtered sensor data from:\",fetchUrl);const response=await fetch(fetchUrl,{headers:{'Accept':'application/json'}});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const result=await response.json();console.log(\"Fetched filtered sensor data:\",result);// Sort the data by local timestamp (oldest first)\nconst sortedData=result.sort((a,b)=>new Date(a.local)-new Date(b.local));// Map API data to chart format with 'time' and 'reading'\nconst chartData=sortedData.map(item=>({time:new Date(item.local).toLocaleString('en-GB',{hour12:false,hour:'2-digit',minute:'2-digit',second:'2-digit'}),reading:parseFloat(item.reading)}));console.log(\"Updated chart data:\",chartData);setData(chartData);}catch(error){console.error(\"Error fetching filtered sensor data:\",error);}};// Initialization effect (runs once on mount)\n// This effect sets default date/time values, fetches sensor list,\n// selects all sensors by default, and sets the \"initialized\" flag.\nuseEffect(()=>{// Helper functions for formatting date and time in local format\nconst pad=num=>num.toString().padStart(2,'0');const formatDateLocal=date=>`${date.getFullYear()}-${pad(date.getMonth()+1)}-${pad(date.getDate())}`;const formatTimeLocal=date=>`${pad(date.getHours())}:${pad(date.getMinutes())}`;const roundToNearest5Min=date=>{const step=1000*60*5;// 5 minutes in milliseconds\nreturn new Date(Math.floor(date.getTime()/step)*step);};// Set default date/time (last 12 hours rounded to the nearest 5 minutes)\nconst now=new Date();const end=roundToNearest5Min(now);const start=roundToNearest5Min(new Date(now.getTime()-12*60*60*1000));setEndDate(formatDateLocal(end));setEndTime(formatTimeLocal(end));setStartDate(formatDateLocal(start));setStartTime(formatTimeLocal(start));// Fetch sensors from the API\nconst sensorsUrl=`${apiUrl}/sensors`;const fetchSensors=async()=>{try{console.log(\"Fetching sensors from:\",sensorsUrl);const response=await fetch(sensorsUrl,{headers:{'Accept':'application/json'}});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const sensorList=await response.json();console.log(\"Fetched sensor list:\",sensorList);setSensors(sensorList);// Select all sensors by default\nif(sensorList&&sensorList.length>0){const sensorIds=sensorList.map(sensor=>sensor.sensor_id);setSelectedSensors(sensorIds);}}catch(error){console.error(\"Error fetching sensors:\",error);}};// Fetch sensors then mark initialization as complete.\nfetchSensors().then(()=>{setInitialized(true);});},[apiUrl]);// Effect to update the graph whenever filter values change, but only after initialization.\nuseEffect(()=>{if(initialized){updateGraph();}},[startDate,startTime,endDate,endTime,selectedSensors,initialized]);return/*#__PURE__*/_jsxs(\"div\",{style:{width:'100%',height:400},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"menuContainer\",children:[/*#__PURE__*/_jsxs(\"section\",{className:\"section1\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Sensor Selection\"}),/*#__PURE__*/_jsx(\"div\",{className:\"sensor-options\",children:sensors.map(sensor=>/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:sensor.sensor_id,checked:selectedSensors.includes(sensor.sensor_id),onChange:()=>toggleSensor(sensor.sensor_id)}),sensor.name]},sensor.sensor_id))})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"section2\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Date and Range\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"range-selector\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"range-group\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Start Date:\",/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:startDate,onChange:e=>setStartDate(e.target.value)})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Start Time:\",/*#__PURE__*/_jsx(\"input\",{type:\"time\",step:\"300\"// 300 seconds = 5 minutes\n,value:startTime,onChange:e=>setStartTime(e.target.value)})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"range-group\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"End Date:\",/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:endDate,onChange:e=>setEndDate(e.target.value)})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"End Time:\",/*#__PURE__*/_jsx(\"input\",{type:\"time\",step:\"300\",value:endTime,onChange:e=>setEndTime(e.target.value)})]})]})]})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"section3\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Data Options\"}),/*#__PURE__*/_jsx(\"button\",{onClick:downloadCSV,children:\"Download as CSV\"}),/*#__PURE__*/_jsx(\"button\",{onClick:updateGraph,children:\"Apply Filters\"})]})]}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(LineChart,{data:data,margin:{top:5,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"time\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:\"reading\",stroke:\"#8884d8\",activeDot:{r:8}})]})})]});}export default LineGraph;","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsx","_jsx","jsxs","_jsxs","LineGraph","data","setData","selectedSensors","setSelectedSensors","sensors","setSensors","startDate","setStartDate","startTime","setStartTime","endDate","setEndDate","endTime","setEndTime","initialized","setInitialized","apiUrl","process","env","REACT_APP_API_URL","toggleSensor","sensorId","prevSelected","includes","length","console","warn","filter","s","downloadCSV","log","updateGraph","params","URLSearchParams","append","join","fetchUrl","toString","response","fetch","headers","ok","Error","status","result","json","sortedData","sort","a","b","Date","local","chartData","map","item","time","toLocaleString","hour12","hour","minute","second","reading","parseFloat","error","pad","num","padStart","formatDateLocal","date","getFullYear","getMonth","getDate","formatTimeLocal","getHours","getMinutes","roundToNearest5Min","step","Math","floor","getTime","now","end","start","sensorsUrl","fetchSensors","sensorList","sensorIds","sensor","sensor_id","then","style","width","height","children","className","type","value","checked","onChange","name","e","target","onClick","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\nimport './ReactChartsLine.css';\n\nfunction LineGraph() {\n    // Data and sensor selection state\n    const [data, setData] = useState([]);\n    const [selectedSensors, setSelectedSensors] = useState([]);\n    const [sensors, setSensors] = useState([]); // Available sensors list\n\n    // State for the date range selection (local time)\n    const [startDate, setStartDate] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [endTime, setEndTime] = useState('');\n\n    // Flag to indicate that defaults have been set\n    const [initialized, setInitialized] = useState(false);\n\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n    // Toggle function for sensor checkboxes (ensuring at least one sensor remains selected)\n    const toggleSensor = (sensorId) => {\n        setSelectedSensors((prevSelected) => {\n            // If sensorId is already selected, check if it is the only one selected.\n            if (prevSelected.includes(sensorId)) {\n                if (prevSelected.length === 1) {\n                    console.warn(\"At least one sensor must be selected.\");\n                    return prevSelected;\n                } else {\n                    return prevSelected.filter((s) => s !== sensorId);\n                }\n            } else {\n                // Otherwise, add it to the selection.\n                return [...prevSelected, sensorId];\n            }\n        });\n    };\n\n    // Placeholder function for CSV download\n    const downloadCSV = () => {\n        console.log(\"CSV download initiated (placeholder)\");\n    };\n\n    // Function to update graph data based on filters\n    const updateGraph = async () => {\n        try {\n            // Build query parameters using URLSearchParams\n            const params = new URLSearchParams();\n            if (selectedSensors.length > 0) {\n                // Join multiple sensor IDs with commas\n                params.append('sensor', selectedSensors.join(','));\n            }\n            if (startDate) params.append('startDate', startDate);\n            if (startTime) params.append('startTime', startTime);\n            if (endDate) params.append('endDate', endDate);\n            if (endTime) params.append('endTime', endTime);\n\n            const fetchUrl = `${apiUrl}/sensorData/filter?${params.toString()}`;\n            console.log(\"Fetching filtered sensor data from:\", fetchUrl);\n            const response = await fetch(fetchUrl, {\n                headers: { 'Accept': 'application/json' }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const result = await response.json();\n            console.log(\"Fetched filtered sensor data:\", result);\n\n            // Sort the data by local timestamp (oldest first)\n            const sortedData = result.sort(\n                (a, b) => new Date(a.local) - new Date(b.local)\n            );\n\n            // Map API data to chart format with 'time' and 'reading'\n            const chartData = sortedData.map((item) => ({\n                time: new Date(item.local).toLocaleString('en-GB', {\n                    hour12: false,\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit'\n                }),\n                reading: parseFloat(item.reading)\n            }));\n            console.log(\"Updated chart data:\", chartData);\n            setData(chartData);\n        } catch (error) {\n            console.error(\"Error fetching filtered sensor data:\", error);\n        }\n    };\n\n    // Initialization effect (runs once on mount)\n    // This effect sets default date/time values, fetches sensor list,\n    // selects all sensors by default, and sets the \"initialized\" flag.\n    useEffect(() => {\n        // Helper functions for formatting date and time in local format\n        const pad = (num) => num.toString().padStart(2, '0');\n        const formatDateLocal = (date) =>\n            `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n        const formatTimeLocal = (date) =>\n            `${pad(date.getHours())}:${pad(date.getMinutes())}`;\n        const roundToNearest5Min = (date) => {\n            const step = 1000 * 60 * 5; // 5 minutes in milliseconds\n            return new Date(Math.floor(date.getTime() / step) * step);\n        };\n\n        // Set default date/time (last 12 hours rounded to the nearest 5 minutes)\n        const now = new Date();\n        const end = roundToNearest5Min(now);\n        const start = roundToNearest5Min(new Date(now.getTime() - 12 * 60 * 60 * 1000));\n        setEndDate(formatDateLocal(end));\n        setEndTime(formatTimeLocal(end));\n        setStartDate(formatDateLocal(start));\n        setStartTime(formatTimeLocal(start));\n\n        // Fetch sensors from the API\n        const sensorsUrl = `${apiUrl}/sensors`;\n        const fetchSensors = async () => {\n            try {\n                console.log(\"Fetching sensors from:\", sensorsUrl);\n                const response = await fetch(sensorsUrl, {\n                    headers: { 'Accept': 'application/json' }\n                });\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const sensorList = await response.json();\n                console.log(\"Fetched sensor list:\", sensorList);\n                setSensors(sensorList);\n                // Select all sensors by default\n                if (sensorList && sensorList.length > 0) {\n                    const sensorIds = sensorList.map((sensor) => sensor.sensor_id);\n                    setSelectedSensors(sensorIds);\n                }\n            } catch (error) {\n                console.error(\"Error fetching sensors:\", error);\n            }\n        };\n\n        // Fetch sensors then mark initialization as complete.\n        fetchSensors().then(() => {\n            setInitialized(true);\n        });\n    }, [apiUrl]);\n\n    // Effect to update the graph whenever filter values change, but only after initialization.\n    useEffect(() => {\n        if (initialized) {\n            updateGraph();\n        }\n    }, [startDate, startTime, endDate, endTime, selectedSensors, initialized]);\n\n    return (\n        <div style={{ width: '100%', height: 400 }}>\n            <div className=\"menuContainer\">\n                {/* Section 1: Sensor Selection */}\n                <section className=\"section1\">\n                    <h5>Sensor Selection</h5>\n                    <div className=\"sensor-options\">\n                        {sensors.map((sensor) => (\n                            <label key={sensor.sensor_id}>\n                                <input\n                                    type=\"checkbox\"\n                                    value={sensor.sensor_id}\n                                    checked={selectedSensors.includes(sensor.sensor_id)}\n                                    onChange={() => toggleSensor(sensor.sensor_id)}\n                                />\n                                {sensor.name}\n                            </label>\n                        ))}\n                    </div>\n                </section>\n\n                {/* Section 2: Date and Range */}\n                <section className=\"section2\">\n                    <h5>Date and Range</h5>\n                    <div className=\"range-selector\">\n                        <div className=\"range-group\">\n                            <label>\n                                Start Date:\n                                <input\n                                    type=\"date\"\n                                    value={startDate}\n                                    onChange={(e) => setStartDate(e.target.value)}\n                                />\n                            </label>\n                            <label>\n                                Start Time:\n                                <input\n                                    type=\"time\"\n                                    step=\"300\" // 300 seconds = 5 minutes\n                                    value={startTime}\n                                    onChange={(e) => setStartTime(e.target.value)}\n                                />\n                            </label>\n                        </div>\n                        <div className=\"range-group\">\n                            <label>\n                                End Date:\n                                <input\n                                    type=\"date\"\n                                    value={endDate}\n                                    onChange={(e) => setEndDate(e.target.value)}\n                                />\n                            </label>\n                            <label>\n                                End Time:\n                                <input\n                                    type=\"time\"\n                                    step=\"300\"\n                                    value={endTime}\n                                    onChange={(e) => setEndTime(e.target.value)}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Section 3: Data Options */}\n                <section className=\"section3\">\n                    <h5>Data Options</h5>\n                    <button onClick={downloadCSV}>Download as CSV</button>\n                    <button onClick={updateGraph}>Apply Filters</button>\n                </section>\n            </div>\n\n            {/* Chart */}\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"reading\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}