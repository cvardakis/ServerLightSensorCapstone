{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/SensorGraph.js\";\n// src/SensorGraph.js\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction SensorGraph() {\n  const [graphData, setGraphData] = useState(null);\n  useEffect(() => {\n    // Replace with your actual Deno server endpoint for the last 12 hours of sensor data\n    fetch('http://your-deno-server/sensorData/last12hours').then(res => res.json()).then(data => {\n      // Assuming data is an array of objects with `timestamp` and `value` properties.\n      // Create labels from timestamps and data points from sensor values.\n      const labels = data.map(item => new Date(item.timestamp).toLocaleTimeString());\n      const values = data.map(item => item.value);\n      setGraphData({\n        labels,\n        datasets: [{\n          label: 'Mag/arcsec²',\n          data: values,\n          fill: false,\n          borderColor: 'blue',\n          tension: 0.1 // smoothness of the line\n        }]\n      });\n    }).catch(err => console.error('Error fetching sensor data:', err));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"Sensor Data Over Last 12 Hours\"), graphData ? /*#__PURE__*/React.createElement(Line, {\n    data: graphData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"Loading graph data...\"));\n}\nexport default SensorGraph;","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","SensorGraph","graphData","setGraphData","fetch","then","res","json","data","labels","map","item","Date","timestamp","toLocaleTimeString","values","value","datasets","label","fill","borderColor","tension","catch","err","console","error","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/SensorGraph.js"],"sourcesContent":["// src/SensorGraph.js\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nfunction SensorGraph() {\n    const [graphData, setGraphData] = useState(null);\n\n    useEffect(() => {\n        // Replace with your actual Deno server endpoint for the last 12 hours of sensor data\n        fetch('http://your-deno-server/sensorData/last12hours')\n            .then((res) => res.json())\n            .then((data) => {\n                // Assuming data is an array of objects with `timestamp` and `value` properties.\n                // Create labels from timestamps and data points from sensor values.\n                const labels = data.map((item) =>\n                    new Date(item.timestamp).toLocaleTimeString()\n                );\n                const values = data.map((item) => item.value);\n                setGraphData({\n                    labels,\n                    datasets: [\n                        {\n                            label: 'Mag/arcsec²',\n                            data: values,\n                            fill: false,\n                            borderColor: 'blue',\n                            tension: 0.1, // smoothness of the line\n                        },\n                    ],\n                });\n            })\n            .catch((err) => console.error('Error fetching sensor data:', err));\n    }, []);\n\n    return (\n        <div>\n            <h2>Sensor Data Over Last 12 Hours</h2>\n            {graphData ? (\n                <Line data={graphData} />\n            ) : (\n                <p>Loading graph data...</p>\n            )}\n        </div>\n    );\n}\n\nexport default SensorGraph;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACIC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;AAEjBP,OAAO,CAACQ,QAAQ,CACZP,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACJ,CAAC;AAED,SAASE,WAAWA,CAAA,EAAG;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZ;IACAe,KAAK,CAAC,gDAAgD,CAAC,CAClDC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACZ;MACA;MACA,MAAMC,MAAM,GAAGD,IAAI,CAACE,GAAG,CAAEC,IAAI,IACzB,IAAIC,IAAI,CAACD,IAAI,CAACE,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAChD,CAAC;MACD,MAAMC,MAAM,GAAGP,IAAI,CAACE,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACK,KAAK,CAAC;MAC7Cb,YAAY,CAAC;QACTM,MAAM;QACNQ,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,aAAa;UACpBV,IAAI,EAAEO,MAAM;UACZI,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE,MAAM;UACnBC,OAAO,EAAE,GAAG,CAAE;QAClB,CAAC;MAET,CAAC,CAAC;IACN,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC,CAAC;EAC1E,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIpC,KAAA,CAAAuC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACI7C,KAAA,CAAAuC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,gCAAkC,CAAC,EACtC9B,SAAS,gBACNf,KAAA,CAAAuC,aAAA,CAACpC,IAAI;IAACkB,IAAI,EAAEN,SAAU;IAAAyB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,gBAEzB7C,KAAA,CAAAuC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,uBAAwB,CAE9B,CAAC;AAEd;AAEA,eAAe/B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}