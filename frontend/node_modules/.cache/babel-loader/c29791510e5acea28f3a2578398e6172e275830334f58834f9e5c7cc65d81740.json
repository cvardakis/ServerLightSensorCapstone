{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './ReactChartsLine.css';\n\n// Custom tooltip component to display local time and mag/arcsecÂ² values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTooltip = ({\n  active,\n  payload,\n  label\n}) => {\n  if (!active || !payload || payload.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#fff',\n      border: '1px solid #ccc',\n      padding: '0.5rem',\n      color: '#000'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontWeight: 'bold',\n        marginBottom: 4\n      },\n      children: [\"Time: \", label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      children: [\"mag/arcsec\\xB2: \", payload[0].value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_c = CustomTooltip;\nfunction LineGraph() {\n  _s();\n  // Data and sensor selection state\n  const [data, setData] = useState([]);\n  const [selectedSensors, setSelectedSensors] = useState([]);\n  const [sensors, setSensors] = useState([]); // Available sensors list\n\n  // State for the date range selection (local time)\n  const [startDate, setStartDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [endTime, setEndTime] = useState('');\n\n  // Flag to indicate that defaults have been set\n  const [initialized, setInitialized] = useState(false);\n  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Toggle function for sensor checkboxes (ensuring at least one sensor remains selected)\n  const toggleSensor = sensorId => {\n    setSelectedSensors(prevSelected => {\n      if (prevSelected.includes(sensorId)) {\n        if (prevSelected.length === 1) {\n          console.warn(\"At least one sensor must be selected.\");\n          return prevSelected;\n        }\n        return prevSelected.filter(s => s !== sensorId);\n      }\n      return [...prevSelected, sensorId];\n    });\n  };\n\n  // Placeholder function for CSV download\n  const downloadCSV = () => {\n    console.log(\"CSV download initiated (placeholder)\");\n  };\n\n  // Function to update graph data based on filters\n  const updateGraph = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (selectedSensors.length > 0) {\n        params.append('sensor', selectedSensors.join(','));\n      }\n      if (startDate) params.append('startDate', startDate);\n      if (startTime) params.append('startTime', startTime);\n      if (endDate) params.append('endDate', endDate);\n      if (endTime) params.append('endTime', endTime);\n      const fetchUrl = `${apiUrl}/sensorData/filter?${params.toString()}`;\n      console.log(\"Fetching filtered sensor data from:\", fetchUrl);\n      const response = await fetch(fetchUrl, {\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const result = await response.json();\n      console.log(\"Fetched filtered sensor data:\", result);\n      const sortedData = result.sort((a, b) => new Date(a.local) - new Date(b.local));\n      const chartData = sortedData.map(item => ({\n        time: new Date(item.local).toLocaleString('en-GB', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        }),\n        reading: parseFloat(item.reading)\n      }));\n      console.log(\"Updated chart data:\", chartData);\n      setData(chartData);\n    } catch (error) {\n      console.error(\"Error fetching filtered sensor data:\", error);\n    }\n  };\n\n  // Initialization effect\n  useEffect(() => {\n    const pad = num => num.toString().padStart(2, '0');\n    const formatDateLocal = date => `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n    const formatTimeLocal = date => `${pad(date.getHours())}:${pad(date.getMinutes())}`;\n    const roundToNearest5Min = date => {\n      const step = 1000 * 60 * 5;\n      return new Date(Math.floor(date.getTime() / step) * step);\n    };\n    const now = new Date();\n    const end = roundToNearest5Min(now);\n    const start = roundToNearest5Min(new Date(now.getTime() - 12 * 60 * 60 * 1000));\n    setEndDate(formatDateLocal(end));\n    setEndTime(formatTimeLocal(end));\n    setStartDate(formatDateLocal(start));\n    setStartTime(formatTimeLocal(start));\n    const sensorsUrl = `${apiUrl}/sensors`;\n    const fetchSensors = async () => {\n      try {\n        console.log(\"Fetching sensors from:\", sensorsUrl);\n        const response = await fetch(sensorsUrl, {\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const sensorList = await response.json();\n        console.log(\"Fetched sensor list:\", sensorList);\n        setSensors(sensorList);\n        if (sensorList.length > 0) {\n          const sensorIds = sensorList.map(s => s.sensor_id);\n          setSelectedSensors(sensorIds);\n        }\n      } catch (error) {\n        console.error(\"Error fetching sensors:\", error);\n      }\n    };\n    fetchSensors().then(() => setInitialized(true));\n  }, [apiUrl]);\n\n  // Update graph on filter changes\n  useEffect(() => {\n    if (initialized) updateGraph();\n  }, [startDate, startTime, endDate, endTime, selectedSensors, initialized]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: 400\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menuContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Sensor Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensor-options\",\n          children: sensors.map(sensor => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              value: sensor.sensor_id,\n              checked: selectedSensors.includes(sensor.sensor_id),\n              onChange: () => toggleSensor(sensor.sensor_id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this), sensor.name]\n          }, sensor.sensor_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Date and Range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"range-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"range-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: startDate,\n                onChange: e => setStartDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                step: \"300\",\n                value: startTime,\n                onChange: e => setStartTime(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"range-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: endDate,\n                onChange: e => setEndDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                step: \"300\",\n                value: endTime,\n                onChange: e => setEndTime(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Data Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadCSV,\n          children: \"Download as CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 500,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\",\n          height: 70,\n          label: {\n            value: \"Local Time\",\n            style: {\n              fontWeight: 'bold'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: \"mag/arcsecÂ²\",\n            angle: -90,\n            position: 'insideLeft',\n            dy: 50,\n            style: {\n              fontWeight: 'bold'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          verticalAlign: \"top\",\n          height: 25,\n          formatter: () => 'Sensor Name'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"reading\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n}\n_s(LineGraph, \"LhoM60yBWS4yAaulv8HLrjMWvXA=\");\n_c2 = LineGraph;\nexport default LineGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","CustomTooltip","active","payload","label","length","style","backgroundColor","border","padding","color","children","fontWeight","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","value","_c","LineGraph","_s","data","setData","selectedSensors","setSelectedSensors","sensors","setSensors","startDate","setStartDate","startTime","setStartTime","endDate","setEndDate","endTime","setEndTime","initialized","setInitialized","apiUrl","process","env","REACT_APP_API_URL","toggleSensor","sensorId","prevSelected","includes","console","warn","filter","s","downloadCSV","log","updateGraph","params","URLSearchParams","append","join","fetchUrl","toString","response","fetch","headers","ok","Error","status","result","json","sortedData","sort","a","b","Date","local","chartData","map","item","time","toLocaleString","hour12","hour","minute","second","reading","parseFloat","error","pad","num","padStart","formatDateLocal","date","getFullYear","getMonth","getDate","formatTimeLocal","getHours","getMinutes","roundToNearest5Min","step","Math","floor","getTime","now","end","start","sensorsUrl","fetchSensors","sensorList","sensorIds","sensor_id","then","width","height","className","sensor","type","checked","onChange","name","e","target","onClick","margin","top","right","left","bottom","strokeDasharray","dataKey","angle","position","dy","content","verticalAlign","formatter","stroke","activeDot","r","_c2","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\nimport './ReactChartsLine.css';\n\n// Custom tooltip component to display local time and mag/arcsecÂ² values\nconst CustomTooltip = ({ active, payload, label }) => {\n    if (!active || !payload || payload.length === 0) return null;\n    return (\n        <div style={{ backgroundColor: '#fff', border: '1px solid #ccc', padding: '0.5rem', color: '#000' }}>\n            <div style={{ fontWeight: 'bold', marginBottom: 4 }}>Time: {label}</div>\n            <div style={{ fontWeight: 'bold' }}>mag/arcsecÂ²: {payload[0].value}</div>\n        </div>\n    );\n};\n\nfunction LineGraph() {\n    // Data and sensor selection state\n    const [data, setData] = useState([]);\n    const [selectedSensors, setSelectedSensors] = useState([]);\n    const [sensors, setSensors] = useState([]); // Available sensors list\n\n    // State for the date range selection (local time)\n    const [startDate, setStartDate] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [endTime, setEndTime] = useState('');\n\n    // Flag to indicate that defaults have been set\n    const [initialized, setInitialized] = useState(false);\n\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n    // Toggle function for sensor checkboxes (ensuring at least one sensor remains selected)\n    const toggleSensor = (sensorId) => {\n        setSelectedSensors((prevSelected) => {\n            if (prevSelected.includes(sensorId)) {\n                if (prevSelected.length === 1) {\n                    console.warn(\"At least one sensor must be selected.\");\n                    return prevSelected;\n                }\n                return prevSelected.filter((s) => s !== sensorId);\n            }\n            return [...prevSelected, sensorId];\n        });\n    };\n\n    // Placeholder function for CSV download\n    const downloadCSV = () => {\n        console.log(\"CSV download initiated (placeholder)\");\n    };\n\n    // Function to update graph data based on filters\n    const updateGraph = async () => {\n        try {\n            const params = new URLSearchParams();\n            if (selectedSensors.length > 0) {\n                params.append('sensor', selectedSensors.join(','));\n            }\n            if (startDate) params.append('startDate', startDate);\n            if (startTime) params.append('startTime', startTime);\n            if (endDate) params.append('endDate', endDate);\n            if (endTime) params.append('endTime', endTime);\n\n            const fetchUrl = `${apiUrl}/sensorData/filter?${params.toString()}`;\n            console.log(\"Fetching filtered sensor data from:\", fetchUrl);\n            const response = await fetch(fetchUrl, { headers: { 'Accept': 'application/json' } });\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            const result = await response.json();\n            console.log(\"Fetched filtered sensor data:\", result);\n\n            const sortedData = result.sort((a, b) => new Date(a.local) - new Date(b.local));\n\n            const chartData = sortedData.map((item) => ({\n                time: new Date(item.local).toLocaleString('en-GB', {\n                    hour12: false,\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit'\n                }),\n                reading: parseFloat(item.reading)\n            }));\n            console.log(\"Updated chart data:\", chartData);\n            setData(chartData);\n        } catch (error) {\n            console.error(\"Error fetching filtered sensor data:\", error);\n        }\n    };\n\n    // Initialization effect\n    useEffect(() => {\n        const pad = (num) => num.toString().padStart(2, '0');\n        const formatDateLocal = (date) => `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n        const formatTimeLocal = (date) => `${pad(date.getHours())}:${pad(date.getMinutes())}`;\n        const roundToNearest5Min = (date) => {\n            const step = 1000 * 60 * 5;\n            return new Date(Math.floor(date.getTime() / step) * step);\n        };\n\n        const now = new Date();\n        const end = roundToNearest5Min(now);\n        const start = roundToNearest5Min(new Date(now.getTime() - 12 * 60 * 60 * 1000));\n        setEndDate(formatDateLocal(end));\n        setEndTime(formatTimeLocal(end));\n        setStartDate(formatDateLocal(start));\n        setStartTime(formatTimeLocal(start));\n\n        const sensorsUrl = `${apiUrl}/sensors`;\n        const fetchSensors = async () => {\n            try {\n                console.log(\"Fetching sensors from:\", sensorsUrl);\n                const response = await fetch(sensorsUrl, { headers: { 'Accept': 'application/json' } });\n                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n                const sensorList = await response.json();\n                console.log(\"Fetched sensor list:\", sensorList);\n                setSensors(sensorList);\n                if (sensorList.length > 0) {\n                    const sensorIds = sensorList.map((s) => s.sensor_id);\n                    setSelectedSensors(sensorIds);\n                }\n            } catch (error) {\n                console.error(\"Error fetching sensors:\", error);\n            }\n        };\n\n        fetchSensors().then(() => setInitialized(true));\n    }, [apiUrl]);\n\n    // Update graph on filter changes\n    useEffect(() => {\n        if (initialized) updateGraph();\n    }, [startDate, startTime, endDate, endTime, selectedSensors, initialized]);\n\n    return (\n        <div style={{ width: '100%', height: 400 }}>\n            <div className=\"menuContainer\">\n                <section className=\"section1\">\n                    <h4>Sensor Selection</h4>\n                    <div className=\"sensor-options\">\n                        {sensors.map((sensor) => (\n                            <label key={sensor.sensor_id}>\n                                <input\n                                    type=\"checkbox\"\n                                    value={sensor.sensor_id}\n                                    checked={selectedSensors.includes(sensor.sensor_id)}\n                                    onChange={() => toggleSensor(sensor.sensor_id)}\n                                />\n                                {sensor.name}\n                            </label>\n                        ))}\n                    </div>\n                </section>\n\n                <section className=\"section2\">\n                    <h4>Date and Range</h4>\n                    <div className=\"range-selector\">\n                        <div className=\"range-group\">\n                            <label>\n                                Start Date:\n                                <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\n                            </label><br />\n                            <label>\n                                Start Time:\n                                <input type=\"time\" step=\"300\" value={startTime} onChange={(e) => setStartTime(e.target.value)} />\n                            </label><br />\n                        </div>\n                        <div className=\"range-group\">\n                            <label>\n                                End Date:\n                                <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\n                            </label><br />\n                            <label>\n                                End Time:\n                                <input type=\"time\" step=\"300\" value={endTime} onChange={(e) => setEndTime(e.target.value)} />\n                            </label>\n                        </div>\n                    </div>\n                </section>\n\n                <section className=\"section3\">\n                    <h4>Data Options</h4>\n                    <button onClick={downloadCSV}>Download as CSV</button>\n                </section>\n            </div>\n\n            <ResponsiveContainer width=\"100%\" height={500}>\n                <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                        dataKey=\"time\"\n                        height={70}\n                        label={{ value: \"Local Time\", style: { fontWeight: 'bold' } }}\n                    />\n                    <YAxis\n                        label={{ value: \"mag/arcsecÂ²\", angle: -90, position: 'insideLeft', dy: 50, style: { fontWeight: 'bold' } }}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend verticalAlign='top' height={25} formatter={() => 'Sensor Name'} />\n                    <Line type=\"monotone\" dataKey=\"reading\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACIC,SAAS,EACTC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,mBAAmB,QAChB,UAAU;AACjB,OAAO,uBAAuB;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAM,CAAC,KAAK;EAClD,IAAI,CAACF,MAAM,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAC5D,oBACIL,OAAA;IAAKM,KAAK,EAAE;MAAEC,eAAe,EAAE,MAAM;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,OAAO,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAChGX,OAAA;MAAKM,KAAK,EAAE;QAAEM,UAAU,EAAE,MAAM;QAAEC,YAAY,EAAE;MAAE,CAAE;MAAAF,QAAA,GAAC,QAAM,EAACP,KAAK;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxEjB,OAAA;MAAKM,KAAK,EAAE;QAAEM,UAAU,EAAE;MAAO,CAAE;MAAAD,QAAA,GAAC,kBAAa,EAACR,OAAO,CAAC,CAAC,CAAC,CAACe,KAAK;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxE,CAAC;AAEd,CAAC;AAACE,EAAA,GARIlB,aAAa;AAUnB,SAASmB,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACmC,eAAe,EAAEC,kBAAkB,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACqC,OAAO,EAAEC,UAAU,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5C;EACA,MAAM,CAACuC,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACyC,SAAS,EAAEC,YAAY,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC2C,OAAO,EAAEC,UAAU,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC6C,OAAO,EAAEC,UAAU,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAM,CAAC+C,WAAW,EAAEC,cAAc,CAAC,GAAGhD,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMiD,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;EAEvE;EACA,MAAMC,YAAY,GAAIC,QAAQ,IAAK;IAC/BlB,kBAAkB,CAAEmB,YAAY,IAAK;MACjC,IAAIA,YAAY,CAACC,QAAQ,CAACF,QAAQ,CAAC,EAAE;QACjC,IAAIC,YAAY,CAACvC,MAAM,KAAK,CAAC,EAAE;UAC3ByC,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAC;UACrD,OAAOH,YAAY;QACvB;QACA,OAAOA,YAAY,CAACI,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKN,QAAQ,CAAC;MACrD;MACA,OAAO,CAAC,GAAGC,YAAY,EAAED,QAAQ,CAAC;IACtC,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACtBJ,OAAO,CAACK,GAAG,CAAC,sCAAsC,CAAC;EACvD,CAAC;;EAED;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;MACpC,IAAI9B,eAAe,CAACnB,MAAM,GAAG,CAAC,EAAE;QAC5BgD,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE/B,eAAe,CAACgC,IAAI,CAAC,GAAG,CAAC,CAAC;MACtD;MACA,IAAI5B,SAAS,EAAEyB,MAAM,CAACE,MAAM,CAAC,WAAW,EAAE3B,SAAS,CAAC;MACpD,IAAIE,SAAS,EAAEuB,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEzB,SAAS,CAAC;MACpD,IAAIE,OAAO,EAAEqB,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEvB,OAAO,CAAC;MAC9C,IAAIE,OAAO,EAAEmB,MAAM,CAACE,MAAM,CAAC,SAAS,EAAErB,OAAO,CAAC;MAE9C,MAAMuB,QAAQ,GAAG,GAAGnB,MAAM,sBAAsBe,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAE;MACnEZ,OAAO,CAACK,GAAG,CAAC,qCAAqC,EAAEM,QAAQ,CAAC;MAC5D,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,EAAE;QAAEI,OAAO,EAAE;UAAE,QAAQ,EAAE;QAAmB;MAAE,CAAC,CAAC;MACrF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;MAC3E,MAAMC,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MACpCpB,OAAO,CAACK,GAAG,CAAC,+BAA+B,EAAEc,MAAM,CAAC;MAEpD,MAAME,UAAU,GAAGF,MAAM,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,KAAK,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,KAAK,CAAC,CAAC;MAE/E,MAAMC,SAAS,GAAGN,UAAU,CAACO,GAAG,CAAEC,IAAI,KAAM;QACxCC,IAAI,EAAE,IAAIL,IAAI,CAACI,IAAI,CAACH,KAAK,CAAC,CAACK,cAAc,CAAC,OAAO,EAAE;UAC/CC,MAAM,EAAE,KAAK;UACbC,IAAI,EAAE,SAAS;UACfC,MAAM,EAAE,SAAS;UACjBC,MAAM,EAAE;QACZ,CAAC,CAAC;QACFC,OAAO,EAAEC,UAAU,CAACR,IAAI,CAACO,OAAO;MACpC,CAAC,CAAC,CAAC;MACHpC,OAAO,CAACK,GAAG,CAAC,qBAAqB,EAAEsB,SAAS,CAAC;MAC7ClD,OAAO,CAACkD,SAAS,CAAC;IACtB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZtC,OAAO,CAACsC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAChE;EACJ,CAAC;;EAED;EACA9F,SAAS,CAAC,MAAM;IACZ,MAAM+F,GAAG,GAAIC,GAAG,IAAKA,GAAG,CAAC5B,QAAQ,CAAC,CAAC,CAAC6B,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACpD,MAAMC,eAAe,GAAIC,IAAI,IAAK,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIL,GAAG,CAACI,IAAI,CAACE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIN,GAAG,CAACI,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;IAC5G,MAAMC,eAAe,GAAIJ,IAAI,IAAK,GAAGJ,GAAG,CAACI,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC,IAAIT,GAAG,CAACI,IAAI,CAACM,UAAU,CAAC,CAAC,CAAC,EAAE;IACrF,MAAMC,kBAAkB,GAAIP,IAAI,IAAK;MACjC,MAAMQ,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC;MAC1B,OAAO,IAAI1B,IAAI,CAAC2B,IAAI,CAACC,KAAK,CAACV,IAAI,CAACW,OAAO,CAAC,CAAC,GAAGH,IAAI,CAAC,GAAGA,IAAI,CAAC;IAC7D,CAAC;IAED,MAAMI,GAAG,GAAG,IAAI9B,IAAI,CAAC,CAAC;IACtB,MAAM+B,GAAG,GAAGN,kBAAkB,CAACK,GAAG,CAAC;IACnC,MAAME,KAAK,GAAGP,kBAAkB,CAAC,IAAIzB,IAAI,CAAC8B,GAAG,CAACD,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAC/EnE,UAAU,CAACuD,eAAe,CAACc,GAAG,CAAC,CAAC;IAChCnE,UAAU,CAAC0D,eAAe,CAACS,GAAG,CAAC,CAAC;IAChCzE,YAAY,CAAC2D,eAAe,CAACe,KAAK,CAAC,CAAC;IACpCxE,YAAY,CAAC8D,eAAe,CAACU,KAAK,CAAC,CAAC;IAEpC,MAAMC,UAAU,GAAG,GAAGlE,MAAM,UAAU;IACtC,MAAMmE,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA3D,OAAO,CAACK,GAAG,CAAC,wBAAwB,EAAEqD,UAAU,CAAC;QACjD,MAAM7C,QAAQ,GAAG,MAAMC,KAAK,CAAC4C,UAAU,EAAE;UAAE3C,OAAO,EAAE;YAAE,QAAQ,EAAE;UAAmB;QAAE,CAAC,CAAC;QACvF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;QAC3E,MAAM0C,UAAU,GAAG,MAAM/C,QAAQ,CAACO,IAAI,CAAC,CAAC;QACxCpB,OAAO,CAACK,GAAG,CAAC,sBAAsB,EAAEuD,UAAU,CAAC;QAC/C/E,UAAU,CAAC+E,UAAU,CAAC;QACtB,IAAIA,UAAU,CAACrG,MAAM,GAAG,CAAC,EAAE;UACvB,MAAMsG,SAAS,GAAGD,UAAU,CAAChC,GAAG,CAAEzB,CAAC,IAAKA,CAAC,CAAC2D,SAAS,CAAC;UACpDnF,kBAAkB,CAACkF,SAAS,CAAC;QACjC;MACJ,CAAC,CAAC,OAAOvB,KAAK,EAAE;QACZtC,OAAO,CAACsC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD;IACJ,CAAC;IAEDqB,YAAY,CAAC,CAAC,CAACI,IAAI,CAAC,MAAMxE,cAAc,CAAC,IAAI,CAAC,CAAC;EACnD,CAAC,EAAE,CAACC,MAAM,CAAC,CAAC;;EAEZ;EACAhD,SAAS,CAAC,MAAM;IACZ,IAAI8C,WAAW,EAAEgB,WAAW,CAAC,CAAC;EAClC,CAAC,EAAE,CAACxB,SAAS,EAAEE,SAAS,EAAEE,OAAO,EAAEE,OAAO,EAAEV,eAAe,EAAEY,WAAW,CAAC,CAAC;EAE1E,oBACIpC,OAAA;IAAKM,KAAK,EAAE;MAAEwG,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAI,CAAE;IAAApG,QAAA,gBACvCX,OAAA;MAAKgH,SAAS,EAAC,eAAe;MAAArG,QAAA,gBAC1BX,OAAA;QAASgH,SAAS,EAAC,UAAU;QAAArG,QAAA,gBACzBX,OAAA;UAAAW,QAAA,EAAI;QAAgB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBjB,OAAA;UAAKgH,SAAS,EAAC,gBAAgB;UAAArG,QAAA,EAC1Be,OAAO,CAACgD,GAAG,CAAEuC,MAAM,iBAChBjH,OAAA;YAAAW,QAAA,gBACIX,OAAA;cACIkH,IAAI,EAAC,UAAU;cACfhG,KAAK,EAAE+F,MAAM,CAACL,SAAU;cACxBO,OAAO,EAAE3F,eAAe,CAACqB,QAAQ,CAACoE,MAAM,CAACL,SAAS,CAAE;cACpDQ,QAAQ,EAAEA,CAAA,KAAM1E,YAAY,CAACuE,MAAM,CAACL,SAAS;YAAE;cAAA9F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClD,CAAC,EACDgG,MAAM,CAACI,IAAI;UAAA,GAPJJ,MAAM,CAACL,SAAS;YAAA9F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQrB,CACV;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEVjB,OAAA;QAASgH,SAAS,EAAC,UAAU;QAAArG,QAAA,gBACzBX,OAAA;UAAAW,QAAA,EAAI;QAAc;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvBjB,OAAA;UAAKgH,SAAS,EAAC,gBAAgB;UAAArG,QAAA,gBAC3BX,OAAA;YAAKgH,SAAS,EAAC,aAAa;YAAArG,QAAA,gBACxBX,OAAA;cAAAW,QAAA,GAAO,aAEH,eAAAX,OAAA;gBAAOkH,IAAI,EAAC,MAAM;gBAAChG,KAAK,EAAEU,SAAU;gBAACwF,QAAQ,EAAGE,CAAC,IAAKzF,YAAY,CAACyF,CAAC,CAACC,MAAM,CAACrG,KAAK;cAAE;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnF,CAAC,eAAAjB,OAAA;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACdjB,OAAA;cAAAW,QAAA,GAAO,aAEH,eAAAX,OAAA;gBAAOkH,IAAI,EAAC,MAAM;gBAACjB,IAAI,EAAC,KAAK;gBAAC/E,KAAK,EAAEY,SAAU;gBAACsF,QAAQ,EAAGE,CAAC,IAAKvF,YAAY,CAACuF,CAAC,CAACC,MAAM,CAACrG,KAAK;cAAE;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9F,CAAC,eAAAjB,OAAA;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACb,CAAC,eACNjB,OAAA;YAAKgH,SAAS,EAAC,aAAa;YAAArG,QAAA,gBACxBX,OAAA;cAAAW,QAAA,GAAO,WAEH,eAAAX,OAAA;gBAAOkH,IAAI,EAAC,MAAM;gBAAChG,KAAK,EAAEc,OAAQ;gBAACoF,QAAQ,EAAGE,CAAC,IAAKrF,UAAU,CAACqF,CAAC,CAACC,MAAM,CAACrG,KAAK;cAAE;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/E,CAAC,eAAAjB,OAAA;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACdjB,OAAA;cAAAW,QAAA,GAAO,WAEH,eAAAX,OAAA;gBAAOkH,IAAI,EAAC,MAAM;gBAACjB,IAAI,EAAC,KAAK;gBAAC/E,KAAK,EAAEgB,OAAQ;gBAACkF,QAAQ,EAAGE,CAAC,IAAKnF,UAAU,CAACmF,CAAC,CAACC,MAAM,CAACrG,KAAK;cAAE;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1F,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACP,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEVjB,OAAA;QAASgH,SAAS,EAAC,UAAU;QAAArG,QAAA,gBACzBX,OAAA;UAAAW,QAAA,EAAI;QAAY;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrBjB,OAAA;UAAQwH,OAAO,EAAEtE,WAAY;UAAAvC,QAAA,EAAC;QAAe;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eAENjB,OAAA,CAACF,mBAAmB;MAACgH,KAAK,EAAC,MAAM;MAACC,MAAM,EAAE,GAAI;MAAApG,QAAA,eAC1CX,OAAA,CAACT,SAAS;QAAC+B,IAAI,EAAEA,IAAK;QAACmG,MAAM,EAAE;UAAEC,GAAG,EAAE,CAAC;UAAEC,KAAK,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAE,CAAE;QAAAlH,QAAA,gBACtEX,OAAA,CAACL,aAAa;UAACmI,eAAe,EAAC;QAAK;UAAAhH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvCjB,OAAA,CAACP,KAAK;UACFsI,OAAO,EAAC,MAAM;UACdhB,MAAM,EAAE,EAAG;UACX3G,KAAK,EAAE;YAAEc,KAAK,EAAE,YAAY;YAAEZ,KAAK,EAAE;cAAEM,UAAU,EAAE;YAAO;UAAE;QAAE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,eACFjB,OAAA,CAACN,KAAK;UACFU,KAAK,EAAE;YAAEc,KAAK,EAAE,aAAa;YAAE8G,KAAK,EAAE,CAAC,EAAE;YAAEC,QAAQ,EAAE,YAAY;YAAEC,EAAE,EAAE,EAAE;YAAE5H,KAAK,EAAE;cAAEM,UAAU,EAAE;YAAO;UAAE;QAAE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9G,CAAC,eACFjB,OAAA,CAACJ,OAAO;UAACuI,OAAO,eAAEnI,OAAA,CAACC,aAAa;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvCjB,OAAA,CAACH,MAAM;UAACuI,aAAa,EAAC,KAAK;UAACrB,MAAM,EAAE,EAAG;UAACsB,SAAS,EAAEA,CAAA,KAAM;QAAc;UAAAvH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC1EjB,OAAA,CAACR,IAAI;UAAC0H,IAAI,EAAC,UAAU;UAACa,OAAO,EAAC,SAAS;UAACO,MAAM,EAAC,SAAS;UAACC,SAAS,EAAE;YAAEC,CAAC,EAAE;UAAE;QAAE;UAAA1H,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEd;AAACI,EAAA,CA3LQD,SAAS;AAAAqH,GAAA,GAATrH,SAAS;AA6LlB,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAAsH,GAAA;AAAAC,YAAA,CAAAvH,EAAA;AAAAuH,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}