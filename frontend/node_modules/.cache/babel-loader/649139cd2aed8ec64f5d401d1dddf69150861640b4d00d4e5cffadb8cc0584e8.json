{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './ReactChartsLine.css';\n\n/* ---------- Tooltip ---------- */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTooltip = ({\n  active,\n  payload,\n  label\n}) => {\n  if (!active || !(payload !== null && payload !== void 0 && payload.length)) return null;\n  const timeLabel = new Date(label).toLocaleTimeString('en-GB', {\n    hour12: false,\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#fff',\n      border: '1px solid #ccc',\n      padding: '0.5rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontWeight: 'bold',\n        marginBottom: 4\n      },\n      children: [\"Time: \", timeLabel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), payload.map(e => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: e.color,\n        fontWeight: 'bold'\n      },\n      children: [e.name, \": \", e.value]\n    }, e.dataKey, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n/* ---------- Main component ---------- */\n_c = CustomTooltip;\nfunction LineGraph() {\n  _s();\n  /* ---- state ---- */\n  const [data, setData] = useState([]);\n  const [rawData, setRawData] = useState([]);\n  const [sensors, setSensors] = useState([]);\n  const [selectedSensors, setSelected] = useState([]);\n  const [initialized, setInit] = useState(false);\n  const [startDate, setStartDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [endTime, setEndTime] = useState('');\n  const [yMin, setYMin] = useState('');\n  const [yMax, setYMax] = useState('');\n  const [yStep, setYStep] = useState(5);\n  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  /* ---- helpers ---- */\n  const MS_HOUR = 3600 * 1000;\n  const MS_DAY = 24 * MS_HOUR;\n  const toggleSensor = id => {\n    setSelected(prev => prev.includes(id) ? prev.length > 1 ? prev.filter(s => s !== id) : prev : [...prev, id]);\n  };\n  const downloadCSV = () => {\n    if (!rawData.length) return;\n    const headers = Object.keys(rawData[0]);\n    const csv = [headers.join(','), ...rawData.map(r => headers.map(h => `\"${r[h]}\"`).join(','))].join('\\r\\n');\n    const url = URL.createObjectURL(new Blob([csv], {\n      type: 'text/csv'\n    }));\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'Utah-skyscope-data.csv';\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n    URL.revokeObjectURL(url);\n  };\n\n  /* ---- initial load ---- */\n  useEffect(() => {\n    const pad = n => String(n).padStart(2, '0');\n    const round5 = d => new Date(Math.floor(d.getTime() / (5 * 60 * 1000)) * (5 * 60 * 1000));\n    const now = round5(new Date());\n    const ago12h = new Date(now.getTime() - 12 * MS_HOUR);\n    setStartDate(`${ago12h.getFullYear()}-${pad(ago12h.getMonth() + 1)}-${pad(ago12h.getDate())}`);\n    setStartTime(`${pad(ago12h.getHours())}:${pad(ago12h.getMinutes())}`);\n    setEndDate(`${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())}`);\n    setEndTime(`${pad(now.getHours())}:${pad(now.getMinutes())}`);\n    fetch(`${apiUrl}/sensors`).then(r => r.json()).then(list => {\n      setSensors(list);\n      setSelected(list.map(s => s.sensor_id));\n      setInit(true);\n    }).catch(console.error);\n  }, [apiUrl]);\n\n  /* ---- polling fetch ---- */\n  useEffect(() => {\n    if (!initialized) return;\n    const pull = () => {\n      const p = new URLSearchParams();\n      if (selectedSensors.length) p.append('sensor', selectedSensors.join(','));\n      if (startDate) p.append('startDate', startDate);\n      if (startTime) p.append('startTime', startTime);\n      if (endDate) p.append('endDate', endDate);\n      if (endTime) p.append('endTime', endTime);\n      fetch(`${apiUrl}/sensorData/filter?${p.toString()}`).then(r => r.json()).then(rows => {\n        setRawData(rows);\n        const grouped = {},\n          readings = [];\n        rows.forEach(row => {\n          const ts = new Date(row.local).getTime();\n          grouped[ts] ??= {\n            timestamp: ts\n          };\n          grouped[ts][row.sensor_id] = +row.reading;\n          readings.push(+row.reading);\n        });\n        setData(Object.values(grouped));\n        const ceilMax = Math.ceil(Math.max(0, ...readings) / yStep) * yStep;\n        setYMin('0');\n        setYMax(String(ceilMax));\n      }).catch(console.error);\n    };\n    pull();\n    const id = setInterval(pull, 60000);\n    return () => clearInterval(id);\n  }, [apiUrl, initialized, startDate, startTime, endDate, endTime, selectedSensors, yStep]);\n\n  /* ---- axis calculations ---- */\n  const startTs = startDate && startTime ? Date.parse(`${startDate}T${startTime}`) : 0;\n  const endTs = endDate && endTime ? Date.parse(`${endDate}T${endTime}`) : Date.now();\n  const spanMs = endTs - startTs;\n  const useDays = spanMs > MS_DAY;\n\n  /* --- X ticks --- */\n  const xTicks = [];\n  if (startTs < endTs) {\n    let first = new Date(startTs);\n    if (useDays) {\n      first.setHours(0, 0, 0, 0);\n      if (first.getTime() < startTs) first = new Date(first.getTime() + MS_DAY);\n      for (let t = first.getTime(); t <= endTs; t += MS_DAY) xTicks.push(t);\n    } else {\n      first.setMinutes(0, 0, 0);\n      if (first.getTime() < startTs) first = new Date(first.getTime() + MS_HOUR);\n      for (let t = first.getTime(); t <= endTs; t += MS_HOUR) xTicks.push(t);\n    }\n  }\n\n  /* --- Y ticks --- */\n  const yMinNum = +yMin || 0,\n    yMaxNum = +yMax || 0;\n  const yTicks = [];\n  for (let v = yMinNum; v <= yMaxNum; v += yStep) yTicks.push(v);\n  const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#a4de6c'];\n\n  /* ---------- render ---------- */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: 600\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menuContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Data Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadCSV,\n          children: \"Download as CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        margin: {\n          top: 20,\n          right: 10,\n          bottom: 80,\n          left: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\",\n          type: \"number\",\n          domain: [startTs, endTs],\n          ticks: xTicks,\n          tickFormatter: ms => new Date(ms).toLocaleString('en-GB', useDays ? {\n            month: '2-digit',\n            day: '2-digit'\n          } // MM/DD\n          : {\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit'\n          } // HH:MM\n          ),\n          label: {\n            value: useDays ? 'Date' : 'Local Time',\n            position: 'bottom',\n            offset: 20,\n            style: {\n              fontWeight: 'bold'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          domain: [yMinNum, yMaxNum],\n          ticks: yTicks,\n          label: {\n            value: 'mag/arcsecÂ²',\n            angle: -90,\n            position: 'insideLeft',\n            dy: 50,\n            style: {\n              fontWeight: 'bold'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          verticalAlign: \"top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), sensors.filter(s => selectedSensors.includes(s.sensor_id)).map((s, i) => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: s.sensor_id,\n          name: s.name,\n          stroke: colors[i % colors.length],\n          dot: false\n        }, s.sensor_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(LineGraph, \"iRGvk7ztvkYfKjCs105SDSH9WC4=\");\n_c2 = LineGraph;\nexport default LineGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","CustomTooltip","active","payload","label","length","timeLabel","Date","toLocaleTimeString","hour12","hour","minute","second","style","backgroundColor","border","padding","children","fontWeight","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","map","e","color","name","value","dataKey","_c","LineGraph","_s","data","setData","rawData","setRawData","sensors","setSensors","selectedSensors","setSelected","initialized","setInit","startDate","setStartDate","startTime","setStartTime","endDate","setEndDate","endTime","setEndTime","yMin","setYMin","yMax","setYMax","yStep","setYStep","apiUrl","process","env","REACT_APP_API_URL","MS_HOUR","MS_DAY","toggleSensor","id","prev","includes","filter","s","downloadCSV","headers","Object","keys","csv","join","r","h","url","URL","createObjectURL","Blob","type","a","document","createElement","href","download","body","appendChild","click","remove","revokeObjectURL","pad","n","String","padStart","round5","d","Math","floor","getTime","now","ago12h","getFullYear","getMonth","getDate","getHours","getMinutes","fetch","then","json","list","sensor_id","catch","console","error","pull","p","URLSearchParams","append","toString","rows","grouped","readings","forEach","row","ts","local","timestamp","reading","push","values","ceilMax","ceil","max","setInterval","clearInterval","startTs","parse","endTs","spanMs","useDays","xTicks","first","setHours","t","setMinutes","yMinNum","yMaxNum","yTicks","v","colors","width","height","className","onClick","margin","top","right","bottom","left","strokeDasharray","domain","ticks","tickFormatter","ms","toLocaleString","month","day","position","offset","angle","dy","content","verticalAlign","i","stroke","dot","_c2","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\nimport './ReactChartsLine.css';\n\n/* ---------- Tooltip ---------- */\nconst CustomTooltip = ({ active, payload, label }) => {\n    if (!active || !payload?.length) return null;\n    const timeLabel = new Date(label).toLocaleTimeString('en-GB', {\n        hour12: false, hour: '2-digit', minute: '2-digit', second: '2-digit',\n    });\n    return (\n        <div style={{ backgroundColor: '#fff', border: '1px solid #ccc', padding: '0.5rem' }}>\n            <div style={{ fontWeight: 'bold', marginBottom: 4 }}>Time: {timeLabel}</div>\n            {payload.map(e => (\n                <div key={e.dataKey} style={{ color: e.color, fontWeight: 'bold' }}>\n                    {e.name}: {e.value}\n                </div>\n            ))}\n        </div>\n    );\n};\n\n/* ---------- Main component ---------- */\nfunction LineGraph() {\n    /* ---- state ---- */\n    const [data, setData]           = useState([]);\n    const [rawData, setRawData]     = useState([]);\n    const [sensors, setSensors]     = useState([]);\n    const [selectedSensors, setSelected] = useState([]);\n    const [initialized, setInit]    = useState(false);\n\n    const [startDate, setStartDate] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endDate,   setEndDate]   = useState('');\n    const [endTime,   setEndTime]   = useState('');\n\n    const [yMin,  setYMin]  = useState('');\n    const [yMax,  setYMax]  = useState('');\n    const [yStep, setYStep] = useState(5);\n\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n    /* ---- helpers ---- */\n    const MS_HOUR = 3600 * 1000;\n    const MS_DAY  = 24   * MS_HOUR;\n\n    const toggleSensor = id => {\n        setSelected(prev =>\n            prev.includes(id)\n                ? prev.length > 1 ? prev.filter(s => s !== id) : prev\n                : [...prev, id]\n        );\n    };\n\n    const downloadCSV = () => {\n        if (!rawData.length) return;\n        const headers = Object.keys(rawData[0]);\n        const csv = [\n            headers.join(','),\n            ...rawData.map(r => headers.map(h => `\"${r[h]}\"`).join(',')),\n        ].join('\\r\\n');\n        const url = URL.createObjectURL(new Blob([csv], { type: 'text/csv' }));\n        const a = document.createElement('a');\n        a.href = url; a.download = 'Utah-skyscope-data.csv';\n        document.body.appendChild(a); a.click(); a.remove();\n        URL.revokeObjectURL(url);\n    };\n\n    /* ---- initial load ---- */\n    useEffect(() => {\n        const pad = n => String(n).padStart(2, '0');\n        const round5 = d => new Date(Math.floor(d.getTime() / (5*60*1000)) * (5*60*1000));\n        const now    = round5(new Date());\n        const ago12h = new Date(now.getTime() - 12*MS_HOUR);\n\n        setStartDate(`${ago12h.getFullYear()}-${pad(ago12h.getMonth()+1)}-${pad(ago12h.getDate())}`);\n        setStartTime(`${pad(ago12h.getHours())}:${pad(ago12h.getMinutes())}`);\n        setEndDate(`${now.getFullYear()}-${pad(now.getMonth()+1)}-${pad(now.getDate())}`);\n        setEndTime(`${pad(now.getHours())}:${pad(now.getMinutes())}`);\n\n        fetch(`${apiUrl}/sensors`)\n            .then(r => r.json())\n            .then(list => { setSensors(list); setSelected(list.map(s => s.sensor_id)); setInit(true); })\n            .catch(console.error);\n    }, [apiUrl]);\n\n    /* ---- polling fetch ---- */\n    useEffect(() => {\n        if (!initialized) return;\n        const pull = () => {\n            const p = new URLSearchParams();\n            if (selectedSensors.length) p.append('sensor', selectedSensors.join(','));\n            if (startDate) p.append('startDate', startDate);\n            if (startTime) p.append('startTime', startTime);\n            if (endDate)   p.append('endDate',   endDate);\n            if (endTime)   p.append('endTime',   endTime);\n\n            fetch(`${apiUrl}/sensorData/filter?${p.toString()}`)\n                .then(r => r.json())\n                .then(rows => {\n                    setRawData(rows);\n                    const grouped = {}, readings = [];\n                    rows.forEach(row => {\n                        const ts = new Date(row.local).getTime();\n                        grouped[ts] ??= { timestamp: ts };\n                        grouped[ts][row.sensor_id] = +row.reading;\n                        readings.push(+row.reading);\n                    });\n                    setData(Object.values(grouped));\n\n                    const ceilMax = Math.ceil(Math.max(0, ...readings) / yStep) * yStep;\n                    setYMin('0'); setYMax(String(ceilMax));\n                })\n                .catch(console.error);\n        };\n        pull();\n        const id = setInterval(pull, 60000);\n        return () => clearInterval(id);\n    }, [apiUrl, initialized, startDate, startTime, endDate, endTime, selectedSensors, yStep]);\n\n    /* ---- axis calculations ---- */\n    const startTs = startDate && startTime ? Date.parse(`${startDate}T${startTime}`) : 0;\n    const endTs   = endDate   && endTime   ? Date.parse(`${endDate}T${endTime}`)   : Date.now();\n\n    const spanMs  = endTs - startTs;\n    const useDays = spanMs > MS_DAY;\n\n    /* --- X ticks --- */\n    const xTicks = [];\n    if (startTs < endTs) {\n        let first = new Date(startTs);\n        if (useDays) {\n            first.setHours(0, 0, 0, 0);\n            if (first.getTime() < startTs) first = new Date(first.getTime() + MS_DAY);\n            for (let t = first.getTime(); t <= endTs; t += MS_DAY) xTicks.push(t);\n        } else {\n            first.setMinutes(0, 0, 0);\n            if (first.getTime() < startTs) first = new Date(first.getTime() + MS_HOUR);\n            for (let t = first.getTime(); t <= endTs; t += MS_HOUR) xTicks.push(t);\n        }\n    }\n\n    /* --- Y ticks --- */\n    const yMinNum = +yMin || 0, yMaxNum = +yMax || 0;\n    const yTicks  = []; for (let v=yMinNum; v<=yMaxNum; v+=yStep) yTicks.push(v);\n\n    const colors = ['#8884d8','#82ca9d','#ffc658','#ff7300','#a4de6c'];\n\n    /* ---------- render ---------- */\n    return (\n        <div style={{ width: '100%', height: 600 }}>\n            {/* â¦ menu sections unchanged â¦ */}\n            <div className=\"menuContainer\">\n                {/* Sensor selection, date/range, Yâaxis controls (omitted for brevity)â¦ */}\n                {/* CSV button */}\n                <section className=\"section3\">\n                    <h4>Data Options</h4>\n                    {/* Y-axis row ... */}\n                    <button onClick={downloadCSV}>Download as CSV</button>\n                </section>\n            </div>\n\n            {/* Chart */}\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data} margin={{ top:20, right:10, bottom:80, left:10 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                        dataKey=\"timestamp\"\n                        type=\"number\"\n                        domain={[startTs, endTs]}\n                        ticks={xTicks}\n                        tickFormatter={ms => new Date(ms).toLocaleString('en-GB', useDays\n                            ? { month:'2-digit', day:'2-digit' }                // MM/DD\n                            : { hour12:false, hour:'2-digit', minute:'2-digit' } // HH:MM\n                        )}\n                        label={{\n                            value: useDays ? 'Date' : 'Local Time',\n                            position: 'bottom',\n                            offset: 20,\n                            style: { fontWeight: 'bold' }\n                        }}\n                    />\n                    <YAxis\n                        domain={[yMinNum, yMaxNum]}\n                        ticks={yTicks}\n                        label={{ value:'mag/arcsecÂ²', angle:-90, position:'insideLeft', dy:50, style:{fontWeight:'bold'} }}\n                    />\n                    <Tooltip content={<CustomTooltip/>}/>\n                    <Legend verticalAlign=\"top\"/>\n                    {sensors.filter(s=>selectedSensors.includes(s.sensor_id))\n                        .map((s,i)=>(\n                            <Line\n                                key={s.sensor_id}\n                                type=\"monotone\"\n                                dataKey={s.sensor_id}\n                                name={s.name}\n                                stroke={colors[i%colors.length]}\n                                dot={false}\n                            />\n                        ))}\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}