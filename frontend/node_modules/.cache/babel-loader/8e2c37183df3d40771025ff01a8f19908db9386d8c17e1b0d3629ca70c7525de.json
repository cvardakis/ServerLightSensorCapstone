{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\",\n  _s = $RefreshSig$();\n// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineGraph() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Use the environment variable for API URL if available,\n    // otherwise default to localhost (good for development).\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n    const fetchUrl = `${apiUrl}/sensorData/last12hours`;\n    const fetchSensorData = async () => {\n      try {\n        const response = await fetch(fetchUrl);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n        console.log(\"Fetched sensor data:\", result);\n\n        // Sort the data by the UTC timestamp (oldest first)\n        const sortedData = result.sort((a, b) => new Date(a.utc) - new Date(b.utc));\n        console.log(\"Sorted sensor data:\", sortedData);\n\n        // Map the data into the desired format:\n        // 'time' is a formatted time string (x-axis)\n        // 'reading' is the numeric sensor reading (y-axis)\n        const chartData = sortedData.map(item => ({\n          time: new Date(item.utc).toLocaleTimeString(),\n          reading: parseFloat(item.reading)\n        }));\n        console.log(\"Chart data:\", chartData);\n        setData(chartData);\n      } catch (error) {\n        console.error(\"Error fetching sensor data:\", error);\n      }\n    };\n    fetchSensorData();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // The container must have an explicit height for ResponsiveContainer\n    _jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: 400\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Loaded Data: \", data]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: data // Using the fetched and processed data here\n          ,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"reading\",\n            stroke: \"#8884d8\",\n            activeDot: {\n              r: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(LineGraph, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","LineGraph","_s","data","setData","apiUrl","process","env","REACT_APP_API_URL","fetchUrl","fetchSensorData","response","fetch","ok","Error","status","result","json","console","log","sortedData","sort","a","b","Date","utc","chartData","map","item","time","toLocaleTimeString","reading","parseFloat","error","style","width","height","children","fileName","_jsxFileName","lineNumber","columnNumber","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\n\nfunction LineGraph() {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        // Use the environment variable for API URL if available,\n        // otherwise default to localhost (good for development).\n        const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n        const fetchUrl = `${apiUrl}/sensorData/last12hours`;\n\n        const fetchSensorData = async () => {\n            try {\n                const response = await fetch(fetchUrl);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const result = await response.json();\n                console.log(\"Fetched sensor data:\", result);\n\n                // Sort the data by the UTC timestamp (oldest first)\n                const sortedData = result.sort(\n                    (a, b) => new Date(a.utc) - new Date(b.utc)\n                );\n                console.log(\"Sorted sensor data:\", sortedData);\n\n                // Map the data into the desired format:\n                // 'time' is a formatted time string (x-axis)\n                // 'reading' is the numeric sensor reading (y-axis)\n                const chartData = sortedData.map((item) => ({\n                    time: new Date(item.utc).toLocaleTimeString(),\n                    reading: parseFloat(item.reading),\n                }));\n                console.log(\"Chart data:\", chartData);\n\n                setData(chartData);\n            } catch (error) {\n                console.error(\"Error fetching sensor data:\", error);\n            }\n        };\n\n        fetchSensorData();\n    }, []);\n\n    return (\n        // The container must have an explicit height for ResponsiveContainer\n        <div style={{ width: '100%', height: 400 }}>\n            <p>Loaded Data: {data}</p>\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart\n                    data={data} // Using the fetched and processed data here\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"reading\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}