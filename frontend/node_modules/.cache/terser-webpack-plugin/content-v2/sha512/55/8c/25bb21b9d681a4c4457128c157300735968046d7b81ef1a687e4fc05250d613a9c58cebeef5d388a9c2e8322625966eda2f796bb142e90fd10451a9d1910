{"map":"{\"version\":3,\"sources\":[\"/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/SensorStatus.js\",\"/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/SensorGraph.js\",\"/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/App.js\",\"/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/reportWebVitals.js\",\"/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/index.js\"],\"names\":[\"SensorStatus\",\"status\",\"setStatus\",\"useState\",\"latestMeasurement\",\"setLatestMeasurement\",\"useEffect\",\"fetch\",\"then\",\"res\",\"json\",\"data\",\"reportedTime\",\"Date\",\"timestamp\",\"now\",\"catch\",\"err\",\"console\",\"error\",\"React\",\"createElement\",\"style\",\"background\",\"color\",\"padding\",\"width\",\"textAlign\",\"borderRadius\",\"marginTop\",\"value\",\"toLocaleString\",\"ChartJS\",\"register\",\"CategoryScale\",\"LinearScale\",\"PointElement\",\"LineElement\",\"Title\",\"Tooltip\",\"Legend\",\"App\",\"className\",\"margin\",\"reportWebVitals\",\"onPerfEntry\",\"Function\",\"__webpack_require__\",\"e\",\"bind\",\"_ref\",\"getCLS\",\"getFID\",\"getFCP\",\"getLCP\",\"getTTFB\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"+JAkDeA,IAAAA,EA/Cf,WACI,MAAOC,EAAQC,GAAaC,OAAAA,EAAAA,SAAAA,CAAS,OAC9BC,EAAmBC,GAAwBF,OAAAA,EAAAA,SAAAA,CAAS,MAgB3D,OAdAG,OAAAA,EAAAA,UAAAA,CAAU,KAENC,MAAM,6CACDC,KAAMC,GAAQA,EAAIC,QAClBF,KAAMG,IACHN,EAAqBM,GACrB,MAAMC,EAAe,IAAIC,KAAKF,EAAKG,WAC7BC,EAAM,IAAIF,KAEhBX,GADqBa,EAAMH,GAAgB,IAAO,IACzB,GAAK,SAAW,aAE5CI,MAAOC,GAAQC,QAAQC,MAAM,gCAAiCF,KACpE,IAGCG,EAAAA,EAAAC,cAAA,MAAA,KACID,EAAAA,EAAAC,cAAA,KAAA,KAAI,iBACJD,EAAAA,EAAAC,cAAA,MAAA,CACIC,MAAO,CACHC,WAAuB,WAAXtB,EAAsB,QAAU,MAC5CuB,MAAO,QACPC,QAAS,OACTC,MAAO,QACPC,UAAW,SACXC,aAAc,QAGjB3B,EAAqB,WAAXA,EAAsB,SAAW,UAAa,cAE5DG,GACGgB,EAAAA,EAAAC,cAAA,MAAA,CAAKC,MAAO,CAAEO,UAAW,SACrBT,EAAAA,EAAAC,cAAA,IAAA,KACID,EAAAA,EAAAC,cAAA,SAAA,KAAQ,uBAA4B,IAAEjB,EAAkB0B,MAAM,mBAElEV,EAAAA,EAAAC,cAAA,IAAA,KACID,EAAAA,EAAAC,cAAA,SAAA,KAAQ,SAAc,IAAE,IAAIR,KAAKT,EAAkBU,WAAWiB,mCC5BtFC,EAAAA,MAAQC,SACJC,EAAAA,cACAC,EAAAA,YACAC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,MACAC,EAAAA,QACAC,EAAAA,QCLWC,IAAAA,EAXf,WACE,OACIrB,EAAAA,EAAAC,cAAA,MAAA,CAAKqB,UAAU,MAAMpB,MAAO,CAAEG,QAAS,SACrCL,EAAAA,EAAAC,cAAA,KAAA,KAAI,oBACJD,EAAAA,EAAAC,cAACrB,EAAY,MACboB,EAAAA,EAAAC,cAAA,KAAA,CAAIC,MAAO,CAAEqB,OAAQ,cCEdC,IAAAA,EAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAxC,KAAAuC,EAAAE,KAAA,KAAA,KAAqBzC,KAAK0C,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,EAAAA,EAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxC,EAAAA,EAAAC,cAACD,EAAAA,EAAMyC,WAAU,KACfzC,EAAAA,EAAAC,cAACoB,EAAG,QAORG\",\"sourcesContent\":[\"// src/SensorStatus.js\\nimport React, { useState, useEffect } from 'react';\\n\\nfunction SensorStatus() {\\n    const [status, setStatus] = useState(null);\\n    const [latestMeasurement, setLatestMeasurement] = useState(null);\\n\\n    useEffect(() => {\\n        // Replace with your actual Deno server endpoint for the latest measurement\\n        fetch('http://your-deno-server/sensorData/latest')\\n            .then((res) => res.json())\\n            .then((data) => {\\n                setLatestMeasurement(data);\\n                const reportedTime = new Date(data.timestamp);\\n                const now = new Date();\\n                const diffMinutes = (now - reportedTime) / 1000 / 60; // difference in minutes\\n                setStatus(diffMinutes <= 10 ? 'online' : 'offline');\\n            })\\n            .catch((err) => console.error('Error fetching sensor status:', err));\\n    }, []);\\n\\n    return (\\n        <div>\\n            <h2>Sensor Status</h2>\\n            <div\\n                style={{\\n                    background: status === 'online' ? 'green' : 'red',\\n                    color: 'white',\\n                    padding: '10px',\\n                    width: '150px',\\n                    textAlign: 'center',\\n                    borderRadius: '5px',\\n                }}\\n            >\\n                {status ? (status === 'online' ? 'Online' : 'Offline') : 'Loading...'}\\n            </div>\\n            {latestMeasurement && (\\n                <div style={{ marginTop: '10px' }}>\\n                    <p>\\n                        <strong>Latest Measurement:</strong> {latestMeasurement.value} mag/arcsec²\\n                    </p>\\n                    <p>\\n                        <strong>Time:</strong> {new Date(latestMeasurement.timestamp).toLocaleString()}\\n                    </p>\\n                </div>\\n            )}\\n        </div>\\n    );\\n}\\n\\nexport default SensorStatus;\\n\",\"// src/SensorGraph.js\\nimport React, { useState, useEffect } from 'react';\\nimport { Line } from 'react-chartjs-2';\\nimport {\\n    Chart as ChartJS,\\n    CategoryScale,\\n    LinearScale,\\n    PointElement,\\n    LineElement,\\n    Title,\\n    Tooltip,\\n    Legend,\\n} from 'chart.js';\\n\\nChartJS.register(\\n    CategoryScale,\\n    LinearScale,\\n    PointElement,\\n    LineElement,\\n    Title,\\n    Tooltip,\\n    Legend\\n);\\n\\nfunction SensorGraph() {\\n    const [graphData, setGraphData] = useState(null);\\n\\n    useEffect(() => {\\n        // Replace with your actual Deno server endpoint for the last 12 hours of sensor data\\n        fetch('http://your-deno-server/sensorData/last12hours')\\n            .then((res) => res.json())\\n            .then((data) => {\\n                // Assuming data is an array of objects with `timestamp` and `value` properties.\\n                // Create labels from timestamps and data points from sensor values.\\n                const labels = data.map((item) =>\\n                    new Date(item.timestamp).toLocaleTimeString()\\n                );\\n                const values = data.map((item) => item.value);\\n                setGraphData({\\n                    labels,\\n                    datasets: [\\n                        {\\n                            label: 'Mag/arcsec²',\\n                            data: values,\\n                            fill: false,\\n                            borderColor: 'blue',\\n                            tension: 0.1, // smoothness of the line\\n                        },\\n                    ],\\n                });\\n            })\\n            .catch((err) => console.error('Error fetching sensor data:', err));\\n    }, []);\\n\\n    return (\\n        <div>\\n            <h2>Sensor Data Over Last 12 Hours</h2>\\n            {graphData ? (\\n                <Line data={graphData} />\\n            ) : (\\n                <p>Loading graph data...</p>\\n            )}\\n        </div>\\n    );\\n}\\n\\nexport default SensorGraph;\\n\",\"// src/App.js\\nimport React from 'react';\\nimport SensorStatus from './SensorStatus';\\nimport SensorGraph from './SensorGraph';\\n\\nfunction App() {\\n  return (\\n      <div className=\\\"App\\\" style={{ padding: '20px' }}>\\n        <h1>Sensor Dashboard</h1>\\n        <SensorStatus />\\n        <hr style={{ margin: '20px 0' }} />\\n        {/*<SensorGraph />*/}\\n      </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"const reportWebVitals = onPerfEntry => {\\n  if (onPerfEntry && onPerfEntry instanceof Function) {\\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\\n      getCLS(onPerfEntry);\\n      getFID(onPerfEntry);\\n      getFCP(onPerfEntry);\\n      getLCP(onPerfEntry);\\n      getTTFB(onPerfEntry);\\n    });\\n  }\\n};\\n\\nexport default reportWebVitals;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n// If you want to start measuring performance in your app, pass a function\\n// to log results (for example: reportWebVitals(console.log))\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,t,n){},16:function(e,t,n){\"use strict\";n.r(t);var a=n(0),l=n.n(a),r=n(4),o=n.n(r);n(15);var c=function(){const[e,t]=Object(a.useState)(null),[n,r]=Object(a.useState)(null);return Object(a.useEffect)(()=>{fetch(\"http://your-deno-server/sensorData/latest\").then(e=>e.json()).then(e=>{r(e);const n=new Date(e.timestamp),a=new Date;t((a-n)/1e3/60<=10?\"online\":\"offline\")}).catch(e=>console.error(\"Error fetching sensor status:\",e))},[]),l.a.createElement(\"div\",null,l.a.createElement(\"h2\",null,\"Sensor Status\"),l.a.createElement(\"div\",{style:{background:\"online\"===e?\"green\":\"red\",color:\"white\",padding:\"10px\",width:\"150px\",textAlign:\"center\",borderRadius:\"5px\"}},e?\"online\"===e?\"Online\":\"Offline\":\"Loading...\"),n&&l.a.createElement(\"div\",{style:{marginTop:\"10px\"}},l.a.createElement(\"p\",null,l.a.createElement(\"strong\",null,\"Latest Measurement:\"),\" \",n.value,\" mag/arcsec\\xb2\"),l.a.createElement(\"p\",null,l.a.createElement(\"strong\",null,\"Time:\"),\" \",new Date(n.timestamp).toLocaleString())))},i=(n(5),n(1));i.Chart.register(i.CategoryScale,i.LinearScale,i.PointElement,i.LineElement,i.Title,i.Tooltip,i.Legend);var s=function(){return l.a.createElement(\"div\",{className:\"App\",style:{padding:\"20px\"}},l.a.createElement(\"h1\",null,\"Sensor Dashboard\"),l.a.createElement(c,null),l.a.createElement(\"hr\",{style:{margin:\"20px 0\"}}))};var u=e=>{e&&e instanceof Function&&n.e(3).then(n.bind(null,17)).then(t=>{let{getCLS:n,getFID:a,getFCP:l,getLCP:r,getTTFB:o}=t;n(e),a(e),l(e),r(e),o(e)})};o.a.createRoot(document.getElementById(\"root\")).render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(s,null))),u()},6:function(e,t,n){e.exports=n(16)}},[[6,1,2]]]);","extractedComments":[]}