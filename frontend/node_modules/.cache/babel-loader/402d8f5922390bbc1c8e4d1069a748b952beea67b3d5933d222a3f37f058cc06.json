{"ast":null,"code":"// ReactChartsLine.js\nimport React,{useState,useEffect}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer}from'recharts';import'./ReactChartsLine.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function LineGraph(){// Data and sensor selection state\nconst[data,setData]=useState([]);const[selectedSensors,setSelectedSensors]=useState([]);// State for the date range selection\nconst[startDate,setStartDate]=useState('');const[startTime,setStartTime]=useState('');const[endDate,setEndDate]=useState('');const[endTime,setEndTime]=useState('');// Toggle function for sensor checkboxes (allows multiple selections)\nconst toggleSensor=sensor=>{setSelectedSensors(prevSelected=>prevSelected.includes(sensor)?prevSelected.filter(s=>s!==sensor):[...prevSelected,sensor]);};// Placeholder function for CSV download\nconst downloadCSV=()=>{console.log(\"CSV download initiated (placeholder)\");};// Fetch sensor data from the API on component mount\nuseEffect(()=>{const apiUrl=process.env.REACT_APP_API_URL||'http://localhost:8000';const fetchUrl=`${apiUrl}/sensorData/last12hours`;const fetchSensorData=async()=>{try{console.log(\"Fetching from:\",fetchUrl);const response=await fetch(fetchUrl,{headers:{'Accept':'application/json'}});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const result=await response.json();console.log(\"Fetched sensor data:\",result);// Sort data by utc timestamp (oldest first)\nconst sortedData=result.sort((a,b)=>new Date(a.utc)-new Date(b.utc));console.log(\"Sorted sensor data:\",sortedData);// Map API data to chart format using keys 'time' and 'reading'\nconst chartData=sortedData.map(item=>({time:new Date(item.utc).toLocaleTimeString(),reading:parseFloat(item.reading)}));console.log(\"Chart data:\",chartData);setData(chartData);}catch(error){console.error(\"Error fetching sensor data:\",error);}};fetchSensorData();},[]);return/*#__PURE__*/_jsxs(\"div\",{style:{width:'100%',height:400},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"menuContainer\",children:[/*#__PURE__*/_jsxs(\"section\",{className:\"section1\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Sensor Selection\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"sensor-options\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:\"sensor1\",checked:selectedSensors.includes(\"sensor1\"),onChange:()=>toggleSensor(\"sensor1\")}),\"Sensor 1\"]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:\"sensor2\",checked:selectedSensors.includes(\"sensor2\"),onChange:()=>toggleSensor(\"sensor2\")}),\"Sensor 2\"]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:\"sensor3\",checked:selectedSensors.includes(\"sensor3\"),onChange:()=>toggleSensor(\"sensor3\")}),\"Sensor 3\"]})]})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"section2\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Date and Range\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"range-selector\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"range-group\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Start Date:\",/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:startDate,onChange:e=>setStartDate(e.target.value)})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Start Time:\",/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:startTime,onChange:e=>setStartTime(e.target.value)})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"range-group\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"End Date:\",/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:endDate,onChange:e=>setEndDate(e.target.value)})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"End Time:\",/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:endTime,onChange:e=>setEndTime(e.target.value)})]})]})]})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"section3\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Data Options\"}),/*#__PURE__*/_jsx(\"button\",{onClick:downloadCSV,children:\"Download as CSV\"})]})]}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(LineChart,{data:data,margin:{top:5,right:30,left:20,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"time\"}),/*#__PURE__*/_jsx(YAxis,{}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:\"reading\",stroke:\"#8884d8\",activeDot:{r:8}})]})})]});}export default LineGraph;","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsx","_jsx","jsxs","_jsxs","LineGraph","data","setData","selectedSensors","setSelectedSensors","startDate","setStartDate","startTime","setStartTime","endDate","setEndDate","endTime","setEndTime","toggleSensor","sensor","prevSelected","includes","filter","s","downloadCSV","console","log","apiUrl","process","env","REACT_APP_API_URL","fetchUrl","fetchSensorData","response","fetch","headers","ok","Error","status","result","json","sortedData","sort","a","b","Date","utc","chartData","map","item","time","toLocaleTimeString","reading","parseFloat","error","style","width","height","children","className","type","value","checked","onChange","e","target","onClick","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\nimport './ReactChartsLine.css';\n\nfunction LineGraph() {\n    // Data and sensor selection state\n    const [data, setData] = useState([]);\n    const [selectedSensors, setSelectedSensors] = useState([]);\n\n    // State for the date range selection\n    const [startDate, setStartDate] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [endTime, setEndTime] = useState('');\n\n    // Toggle function for sensor checkboxes (allows multiple selections)\n    const toggleSensor = (sensor) => {\n        setSelectedSensors((prevSelected) =>\n            prevSelected.includes(sensor)\n                ? prevSelected.filter((s) => s !== sensor)\n                : [...prevSelected, sensor]\n        );\n    };\n\n    // Placeholder function for CSV download\n    const downloadCSV = () => {\n        console.log(\"CSV download initiated (placeholder)\");\n    };\n\n    // Fetch sensor data from the API on component mount\n    useEffect(() => {\n        const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n        const fetchUrl = `${apiUrl}/sensorData/last12hours`;\n\n        const fetchSensorData = async () => {\n            try {\n                console.log(\"Fetching from:\", fetchUrl);\n                const response = await fetch(fetchUrl, {\n                    headers: { 'Accept': 'application/json' }\n                });\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const result = await response.json();\n                console.log(\"Fetched sensor data:\", result);\n\n                // Sort data by utc timestamp (oldest first)\n                const sortedData = result.sort(\n                    (a, b) => new Date(a.utc) - new Date(b.utc)\n                );\n                console.log(\"Sorted sensor data:\", sortedData);\n\n                // Map API data to chart format using keys 'time' and 'reading'\n                const chartData = sortedData.map((item) => ({\n                    time: new Date(item.utc).toLocaleTimeString(),\n                    reading: parseFloat(item.reading)\n                }));\n                console.log(\"Chart data:\", chartData);\n\n                setData(chartData);\n            } catch (error) {\n                console.error(\"Error fetching sensor data:\", error);\n            }\n        };\n\n        fetchSensorData();\n    }, []);\n\n    return (\n        <div style={{ width: '100%', height: 400 }}>\n            <div className=\"menuContainer\">\n                {/* Section 1: Sensor Selection */}\n                <section className=\"section1\">\n                    <h5>Sensor Selection</h5>\n                    <div className=\"sensor-options\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                value=\"sensor1\"\n                                checked={selectedSensors.includes(\"sensor1\")}\n                                onChange={() => toggleSensor(\"sensor1\")}\n                            />\n                            Sensor 1\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                value=\"sensor2\"\n                                checked={selectedSensors.includes(\"sensor2\")}\n                                onChange={() => toggleSensor(\"sensor2\")}\n                            />\n                            Sensor 2\n                        </label>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                value=\"sensor3\"\n                                checked={selectedSensors.includes(\"sensor3\")}\n                                onChange={() => toggleSensor(\"sensor3\")}\n                            />\n                            Sensor 3\n                        </label>\n                    </div>\n                </section>\n\n                {/* Section 2: Date and Range */}\n                <section className=\"section2\">\n                    <h5>Date and Range</h5>\n                    <div className=\"range-selector\">\n                        <div className=\"range-group\">\n                            <label>\n                                Start Date:\n                                <input\n                                    type=\"date\"\n                                    value={startDate}\n                                    onChange={(e) => setStartDate(e.target.value)}\n                                />\n                            </label>\n                            <label>\n                                Start Time:\n                                <input\n                                    type=\"time\"\n                                    value={startTime}\n                                    onChange={(e) => setStartTime(e.target.value)}\n                                />\n                            </label>\n                        </div>\n                        <div className=\"range-group\">\n                            <label>\n                                End Date:\n                                <input\n                                    type=\"date\"\n                                    value={endDate}\n                                    onChange={(e) => setEndDate(e.target.value)}\n                                />\n                            </label>\n                            <label>\n                                End Time:\n                                <input\n                                    type=\"time\"\n                                    value={endTime}\n                                    onChange={(e) => setEndTime(e.target.value)}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Section 3: Data Options */}\n                <section className=\"section3\">\n                    <h5>Data Options</h5>\n                    <button onClick={downloadCSV}>Download as CSV</button>\n                </section>\n            </div>\n\n            {/* Chart */}\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart\n                    data={data}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"reading\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}