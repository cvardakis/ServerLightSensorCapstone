{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\",\n  _s = $RefreshSig$();\n// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineGraph() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Use the environment variable for API URL if available,\n    // otherwise default to localhost (good for development).\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n    const fetchUrl = `${apiUrl}/sensorData/last12hours`;\n    const fetchSensorData = async () => {\n      try {\n        const response = await fetch(fetchUrl);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n        console.log(\"Fetched sensor data:\", result);\n\n        // Sort the data by the utc timestamp (oldest first)\n        const sortedData = result.sort((a, b) => new Date(a.utc) - new Date(b.utc));\n        console.log(\"Sorted sensor data:\", sortedData);\n\n        // Map the data to the format needed by Recharts\n        const chartData = sortedData.map(item => ({\n          utc: item.utc,\n          reading: parseFloat(item.reading)\n        }));\n        console.log(\"Chart data:\", chartData);\n        setData(chartData);\n      } catch (error) {\n        console.error(\"Error fetching sensor data:\", error);\n      }\n    };\n    fetchSensorData();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // Ensure that the container has an explicit height.\n    _jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: 400\n      },\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 730,\n        height: 250,\n        data: data,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"pv\",\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"uv\",\n          stroke: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(LineGraph, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","LineGraph","_s","data","setData","apiUrl","process","env","REACT_APP_API_URL","fetchUrl","fetchSensorData","response","fetch","ok","Error","status","result","json","console","log","sortedData","sort","a","b","Date","utc","chartData","map","item","reading","parseFloat","error","style","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\n\nfunction LineGraph() {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        // Use the environment variable for API URL if available,\n        // otherwise default to localhost (good for development).\n        const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n        const fetchUrl = `${apiUrl}/sensorData/last12hours`;\n\n        const fetchSensorData = async () => {\n            try {\n                const response = await fetch(fetchUrl);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const result = await response.json();\n                console.log(\"Fetched sensor data:\", result);\n\n                // Sort the data by the utc timestamp (oldest first)\n                const sortedData = result.sort(\n                    (a, b) => new Date(a.utc) - new Date(b.utc)\n                );\n                console.log(\"Sorted sensor data:\", sortedData);\n\n                // Map the data to the format needed by Recharts\n                const chartData = sortedData.map((item) => ({\n                    utc: item.utc,\n                    reading: parseFloat(item.reading),\n                }));\n                console.log(\"Chart data:\", chartData);\n\n                setData(chartData);\n            } catch (error) {\n                console.error(\"Error fetching sensor data:\", error);\n            }\n        };\n\n        fetchSensorData();\n    }, []);\n\n    return (\n        // Ensure that the container has an explicit height.\n        <div style={{ width: '100%', height: 400 }}>\n            <LineChart width={730} height={250} data={data}\n                       margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" />\n                <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n            </LineChart>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}