{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/SensorStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SensorStatus.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SensorStatusList() {\n  _s();\n  const [sensorMeasurements, setSensorMeasurements] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const apiBase = process.env.NODE_ENV === 'development' ? \"localhost:8000\" : 'https://utah-skyscope.deno.dev';\n\n    // 1) fetch list of sensors\n    fetch(`${apiBase || ''}/sensors`).then(res => res.json()).then(sensors => {\n      // 2) for each sensor, fetch latest measurement\n      return Promise.all(sensors.map(({\n        name,\n        sensor_id\n      }) => fetch(`${apiBase || ''}/sensorData/latest?sensorId=${sensor_id}`).then(r => r.json()).then(data => ({\n        name,\n        id: sensor_id,\n        data\n      })).catch(() => ({\n        name,\n        id: sensor_id,\n        error: true\n      }))));\n    }).then(results => {\n      setSensorMeasurements(results);\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Error fetching sensors or data:\", err);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading sensors\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor-status-container\",\n    children: sensorMeasurements.map(({\n      name,\n      id,\n      data,\n      error\n    }) => {\n      if (error || !data || data.error) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensor-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error loading data.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this);\n      }\n\n      // determine online/offline\n      const reported = new Date(data.timestamp);\n      const minutesAgo = (Date.now() - reported.getTime()) / 1000 / 60;\n      const status = minutesAgo <= 10 ? 'online' : 'offline';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sensor-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: status === 'online' ? 'green' : 'red',\n            color: 'white',\n            padding: '10px'\n          },\n          children: status === 'online' ? 'Online' : 'Offline'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Latest Measurement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 68\n            }, this), data.value, \" mag/arcsec\", /*#__PURE__*/_jsxDEV(\"sup\", {\n              children: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"UTC Timestamp\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 63\n            }, this), new Date(data.timestamp).toLocaleString('en-GB', {\n              hour12: false,\n              year: 'numeric',\n              month: '2-digit',\n              day: '2-digit',\n              hour: '2-digit',\n              minute: '2-digit',\n              second: '2-digit'\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(SensorStatusList, \"bX1UqJtmk/VuYFPEjtUuogsgKjg=\");\n_c = SensorStatusList;\nexport default SensorStatusList;\nvar _c;\n$RefreshReg$(_c, \"SensorStatusList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SensorStatusList","_s","sensorMeasurements","setSensorMeasurements","loading","setLoading","apiBase","process","env","NODE_ENV","fetch","then","res","json","sensors","Promise","all","map","name","sensor_id","r","data","id","catch","error","results","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","reported","Date","timestamp","minutesAgo","now","getTime","status","style","background","color","padding","value","toLocaleString","hour12","year","month","day","hour","minute","second","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/SensorStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SensorStatus.css';\n\nfunction SensorStatusList() {\n    const [sensorMeasurements, setSensorMeasurements] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const apiBase = process.env.NODE_ENV === 'development'\n            ? \"localhost:8000\"\n            : 'https://utah-skyscope.deno.dev';\n\n        // 1) fetch list of sensors\n        fetch(`${apiBase || ''}/sensors`)\n            .then(res => res.json())\n            .then(sensors => {\n                // 2) for each sensor, fetch latest measurement\n                return Promise.all(\n                    sensors.map(({ name, sensor_id }) =>\n                        fetch(`${apiBase || ''}/sensorData/latest?sensorId=${sensor_id}`)\n                            .then(r => r.json())\n                            .then(data => ({ name, id: sensor_id, data }))\n                            .catch(() => ({ name, id: sensor_id, error: true }))\n                    )\n                );\n            })\n            .then(results => {\n                setSensorMeasurements(results);\n                setLoading(false);\n            })\n            .catch(err => {\n                console.error(\"Error fetching sensors or data:\", err);\n                setLoading(false);\n            });\n    }, []);\n\n    if (loading) return <p>Loading sensorsâ€¦</p>;\n\n    return (\n        <div className=\"sensor-status-container\">\n            {sensorMeasurements.map(({ name, id, data, error }) => {\n                if (error || !data || data.error) {\n                    return (\n                        <div key={id} className=\"sensor-card\">\n                            <h2>{name}</h2>\n                            <p>Error loading data.</p>\n                        </div>\n                    );\n                }\n\n                // determine online/offline\n                const reported = new Date(data.timestamp);\n                const minutesAgo = (Date.now() - reported.getTime()) / 1000 / 60;\n                const status = minutesAgo <= 10 ? 'online' : 'offline';\n\n                return (\n                    <div key={id} className=\"sensor-card\">\n                        <h2>{name}</h2>\n                        <button\n                            style={{\n                                background: status === 'online' ? 'green' : 'red',\n                                color: 'white',\n                                padding: '10px'\n                            }}\n                        >\n                            {status === 'online' ? 'Online' : 'Offline'}\n                        </button>\n\n                        <div>\n                            <p>\n                                <strong>Latest Measurement</strong><br/>\n                                {data.value} mag/arcsec<sup>2</sup>\n                            </p>\n                            <p>\n                                <strong>UTC Timestamp</strong><br/>\n                                {new Date(data.timestamp).toLocaleString('en-GB', {\n                                    hour12: false,\n                                    year:   'numeric',\n                                    month:  '2-digit',\n                                    day:    '2-digit',\n                                    hour:   '2-digit',\n                                    minute: '2-digit',\n                                    second: '2-digit'\n                                })}\n                            </p>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default SensorStatusList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}