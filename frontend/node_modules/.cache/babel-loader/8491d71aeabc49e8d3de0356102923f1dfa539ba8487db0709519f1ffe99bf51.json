{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\",\n  _s = $RefreshSig$();\n// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './ReactChartsLine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineGraph() {\n  _s();\n  // Data and sensor selection state\n  const [data, setData] = useState([]);\n  const [selectedSensors, setSelectedSensors] = useState([]);\n  const [sensors, setSensors] = useState([]); // Available sensors list\n\n  // State for the date range selection (local time)\n  const [startDate, setStartDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [endTime, setEndTime] = useState('');\n\n  // Flag to indicate that initial defaults have been set and the first updateGraph has been called.\n  const [initialized, setInitialized] = useState(false);\n  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Toggle function for sensor checkboxes (allows multiple selections)\n  const toggleSensor = sensorId => {\n    setSelectedSensors(prevSelected => prevSelected.includes(sensorId) ? prevSelected.filter(s => s !== sensorId) : [...prevSelected, sensorId]);\n  };\n\n  // Placeholder function for CSV download\n  const downloadCSV = () => {\n    console.log('CSV download initiated (placeholder)');\n  };\n\n  // Function to update graph data based on the filters\n  const updateGraph = async () => {\n    try {\n      // Build query parameters using URLSearchParams\n      const params = new URLSearchParams();\n      if (selectedSensors.length > 0) {\n        // If multiple sensors are selected, join their IDs with commas\n        params.append('sensor', selectedSensors.join(','));\n      }\n      if (startDate) params.append('startDate', startDate);\n      if (startTime) params.append('startTime', startTime);\n      if (endDate) params.append('endDate', endDate);\n      if (endTime) params.append('endTime', endTime);\n      const fetchUrl = `${apiUrl}/sensorData/filter?${params.toString()}`;\n      console.log('Fetching filtered sensor data from:', fetchUrl);\n      const response = await fetch(fetchUrl, {\n        headers: {\n          Accept: 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('Fetched filtered sensor data:', result);\n\n      // Sort the data by local timestamp (oldest first)\n      const sortedData = result.sort((a, b) => new Date(a.local) - new Date(b.local));\n\n      // Map API data to chart format with 'time' and 'reading'\n      const chartData = sortedData.map(item => ({\n        time: new Date(item.local).toLocaleString('en-GB', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        }),\n        reading: parseFloat(item.reading)\n      }));\n      console.log('Updated chart data:', chartData);\n      setData(chartData);\n    } catch (error) {\n      console.error('Error fetching filtered sensor data:', error);\n    }\n  };\n\n  // ================================\n  // Consolidated Initialization Effect\n  // This effect runs only once on mount and performs the following:\n  //   1. Sets the default date/time values (last 12 hours, rounded to nearest 5 min).\n  //   2. Fetches the sensors and selects all by default.\n  //   3. Calls updateGraph() once when the defaults are ready.\n  //   4. Marks the component as initialized.\n  // ================================\n  useEffect(() => {\n    const pad = num => num.toString().padStart(2, '0');\n    const formatDateLocal = date => `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n    const formatTimeLocal = date => `${pad(date.getHours())}:${pad(date.getMinutes())}`;\n    const roundToNearest5Min = date => {\n      const step = 1000 * 60 * 5; // 5 minutes in milliseconds\n      return new Date(Math.floor(date.getTime() / step) * step);\n    };\n    const now = new Date();\n    const end = roundToNearest5Min(now);\n    const start = roundToNearest5Min(new Date(now.getTime() - 12 * 60 * 60 * 1000));\n    const newEndDate = formatDateLocal(end);\n    const newEndTime = formatTimeLocal(end);\n    const newStartDate = formatDateLocal(start);\n    const newStartTime = formatTimeLocal(start);\n    setEndDate(newEndDate);\n    setEndTime(newEndTime);\n    setStartDate(newStartDate);\n    setStartTime(newStartTime);\n    const sensorsUrl = `${apiUrl}/sensors`;\n    const fetchSensors = async () => {\n      try {\n        console.log('Fetching sensors from:', sensorsUrl);\n        const response = await fetch(sensorsUrl, {\n          headers: {\n            Accept: 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const sensorList = await response.json();\n        console.log('Fetched sensor list:', sensorList);\n        setSensors(sensorList);\n        // Select all sensors by default\n        if (sensorList && sensorList.length > 0) {\n          const sensorIds = sensorList.map(sensor => sensor.sensor_id);\n          setSelectedSensors(sensorIds);\n          return sensorIds;\n        } else {\n          return [];\n        }\n      } catch (error) {\n        console.error('Error fetching sensors:', error);\n        return [];\n      }\n    };\n\n    // Fetch sensors first, then call updateGraph once everything is ready.\n    fetchSensors().then(sensorIds => {\n      if (sensorIds && sensorIds.length > 0) {\n        updateGraph();\n        setInitialized(true);\n      }\n    });\n  }, [apiUrl]);\n\n  // ================================\n  // Subsequent Updates Effect\n  // This effect listens for changes to the date/time filters or sensor selections\n  // and calls updateGraph only after the initial defaults have been set.\n  // ================================\n  useEffect(() => {\n    if (initialized) {\n      updateGraph();\n    }\n  }, [startDate, startTime, endDate, endTime, selectedSensors, initialized]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: 400\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menuContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Sensor Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensor-options\",\n          children: sensors.map(sensor => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              value: sensor.sensor_id,\n              checked: selectedSensors.includes(sensor.sensor_id),\n              onChange: () => toggleSensor(sensor.sensor_id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 33\n            }, this), sensor.name]\n          }, sensor.sensor_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Date and Range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"range-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"range-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: startDate,\n                onChange: e => setStartDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                step: \"300\" // 300 seconds = 5 minutes\n                ,\n                value: startTime,\n                onChange: e => setStartTime(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"range-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: endDate,\n                onChange: e => setEndDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                step: \"300\",\n                value: endTime,\n                onChange: e => setEndTime(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Data Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadCSV,\n          children: \"Download as CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: updateGraph,\n          children: \"Apply Filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"reading\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n}\n_s(LineGraph, \"LhoM60yBWS4yAaulv8HLrjMWvXA=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","LineGraph","_s","data","setData","selectedSensors","setSelectedSensors","sensors","setSensors","startDate","setStartDate","startTime","setStartTime","endDate","setEndDate","endTime","setEndTime","initialized","setInitialized","apiUrl","process","env","REACT_APP_API_URL","toggleSensor","sensorId","prevSelected","includes","filter","s","downloadCSV","console","log","updateGraph","params","URLSearchParams","length","append","join","fetchUrl","toString","response","fetch","headers","Accept","ok","Error","status","result","json","sortedData","sort","a","b","Date","local","chartData","map","item","time","toLocaleString","hour12","hour","minute","second","reading","parseFloat","error","pad","num","padStart","formatDateLocal","date","getFullYear","getMonth","getDate","formatTimeLocal","getHours","getMinutes","roundToNearest5Min","step","Math","floor","getTime","now","end","start","newEndDate","newEndTime","newStartDate","newStartTime","sensorsUrl","fetchSensors","sensorList","sensorIds","sensor","sensor_id","then","style","width","height","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","value","checked","onChange","name","e","target","onClick","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\nimport './ReactChartsLine.css';\n\nfunction LineGraph() {\n    // Data and sensor selection state\n    const [data, setData] = useState([]);\n    const [selectedSensors, setSelectedSensors] = useState([]);\n    const [sensors, setSensors] = useState([]); // Available sensors list\n\n    // State for the date range selection (local time)\n    const [startDate, setStartDate] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [endTime, setEndTime] = useState('');\n\n    // Flag to indicate that initial defaults have been set and the first updateGraph has been called.\n    const [initialized, setInitialized] = useState(false);\n\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n    // Toggle function for sensor checkboxes (allows multiple selections)\n    const toggleSensor = (sensorId) => {\n        setSelectedSensors((prevSelected) =>\n            prevSelected.includes(sensorId)\n                ? prevSelected.filter((s) => s !== sensorId)\n                : [...prevSelected, sensorId]\n        );\n    };\n\n    // Placeholder function for CSV download\n    const downloadCSV = () => {\n        console.log('CSV download initiated (placeholder)');\n    };\n\n    // Function to update graph data based on the filters\n    const updateGraph = async () => {\n        try {\n            // Build query parameters using URLSearchParams\n            const params = new URLSearchParams();\n            if (selectedSensors.length > 0) {\n                // If multiple sensors are selected, join their IDs with commas\n                params.append('sensor', selectedSensors.join(','));\n            }\n            if (startDate) params.append('startDate', startDate);\n            if (startTime) params.append('startTime', startTime);\n            if (endDate) params.append('endDate', endDate);\n            if (endTime) params.append('endTime', endTime);\n\n            const fetchUrl = `${apiUrl}/sensorData/filter?${params.toString()}`;\n            console.log('Fetching filtered sensor data from:', fetchUrl);\n            const response = await fetch(fetchUrl, {\n                headers: { Accept: 'application/json' },\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const result = await response.json();\n            console.log('Fetched filtered sensor data:', result);\n\n            // Sort the data by local timestamp (oldest first)\n            const sortedData = result.sort(\n                (a, b) => new Date(a.local) - new Date(b.local)\n            );\n\n            // Map API data to chart format with 'time' and 'reading'\n            const chartData = sortedData.map((item) => ({\n                time: new Date(item.local).toLocaleString('en-GB', {\n                    hour12: false,\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit',\n                }),\n                reading: parseFloat(item.reading),\n            }));\n            console.log('Updated chart data:', chartData);\n            setData(chartData);\n        } catch (error) {\n            console.error('Error fetching filtered sensor data:', error);\n        }\n    };\n\n    // ================================\n    // Consolidated Initialization Effect\n    // This effect runs only once on mount and performs the following:\n    //   1. Sets the default date/time values (last 12 hours, rounded to nearest 5 min).\n    //   2. Fetches the sensors and selects all by default.\n    //   3. Calls updateGraph() once when the defaults are ready.\n    //   4. Marks the component as initialized.\n    // ================================\n    useEffect(() => {\n        const pad = (num) => num.toString().padStart(2, '0');\n\n        const formatDateLocal = (date) =>\n            `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n\n        const formatTimeLocal = (date) =>\n            `${pad(date.getHours())}:${pad(date.getMinutes())}`;\n\n        const roundToNearest5Min = (date) => {\n            const step = 1000 * 60 * 5; // 5 minutes in milliseconds\n            return new Date(Math.floor(date.getTime() / step) * step);\n        };\n\n        const now = new Date();\n        const end = roundToNearest5Min(now);\n        const start = roundToNearest5Min(new Date(now.getTime() - 12 * 60 * 60 * 1000));\n\n        const newEndDate = formatDateLocal(end);\n        const newEndTime = formatTimeLocal(end);\n        const newStartDate = formatDateLocal(start);\n        const newStartTime = formatTimeLocal(start);\n\n        setEndDate(newEndDate);\n        setEndTime(newEndTime);\n        setStartDate(newStartDate);\n        setStartTime(newStartTime);\n\n        const sensorsUrl = `${apiUrl}/sensors`;\n\n        const fetchSensors = async () => {\n            try {\n                console.log('Fetching sensors from:', sensorsUrl);\n                const response = await fetch(sensorsUrl, {\n                    headers: { Accept: 'application/json' },\n                });\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const sensorList = await response.json();\n                console.log('Fetched sensor list:', sensorList);\n                setSensors(sensorList);\n                // Select all sensors by default\n                if (sensorList && sensorList.length > 0) {\n                    const sensorIds = sensorList.map((sensor) => sensor.sensor_id);\n                    setSelectedSensors(sensorIds);\n                    return sensorIds;\n                } else {\n                    return [];\n                }\n            } catch (error) {\n                console.error('Error fetching sensors:', error);\n                return [];\n            }\n        };\n\n        // Fetch sensors first, then call updateGraph once everything is ready.\n        fetchSensors().then((sensorIds) => {\n            if (sensorIds && sensorIds.length > 0) {\n                updateGraph();\n                setInitialized(true);\n            }\n        });\n    }, [apiUrl]);\n\n    // ================================\n    // Subsequent Updates Effect\n    // This effect listens for changes to the date/time filters or sensor selections\n    // and calls updateGraph only after the initial defaults have been set.\n    // ================================\n    useEffect(() => {\n        if (initialized) {\n            updateGraph();\n        }\n    }, [startDate, startTime, endDate, endTime, selectedSensors, initialized]);\n\n    return (\n        <div style={{ width: '100%', height: 400 }}>\n            <div className=\"menuContainer\">\n                {/* Section 1: Sensor Selection */}\n                <section className=\"section1\">\n                    <h5>Sensor Selection</h5>\n                    <div className=\"sensor-options\">\n                        {sensors.map((sensor) => (\n                            <label key={sensor.sensor_id}>\n                                <input\n                                    type=\"checkbox\"\n                                    value={sensor.sensor_id}\n                                    checked={selectedSensors.includes(sensor.sensor_id)}\n                                    onChange={() => toggleSensor(sensor.sensor_id)}\n                                />\n                                {sensor.name}\n                            </label>\n                        ))}\n                    </div>\n                </section>\n\n                {/* Section 2: Date and Range */}\n                <section className=\"section2\">\n                    <h5>Date and Range</h5>\n                    <div className=\"range-selector\">\n                        <div className=\"range-group\">\n                            <label>\n                                Start Date:\n                                <input\n                                    type=\"date\"\n                                    value={startDate}\n                                    onChange={(e) => setStartDate(e.target.value)}\n                                />\n                            </label>\n                            <label>\n                                Start Time:\n                                <input\n                                    type=\"time\"\n                                    step=\"300\" // 300 seconds = 5 minutes\n                                    value={startTime}\n                                    onChange={(e) => setStartTime(e.target.value)}\n                                />\n                            </label>\n                        </div>\n                        <div className=\"range-group\">\n                            <label>\n                                End Date:\n                                <input\n                                    type=\"date\"\n                                    value={endDate}\n                                    onChange={(e) => setEndDate(e.target.value)}\n                                />\n                            </label>\n                            <label>\n                                End Time:\n                                <input\n                                    type=\"time\"\n                                    step=\"300\"\n                                    value={endTime}\n                                    onChange={(e) => setEndTime(e.target.value)}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Section 3: Data Options */}\n                <section className=\"section3\">\n                    <h5>Data Options</h5>\n                    <button onClick={downloadCSV}>Download as CSV</button>\n                    <button onClick={updateGraph}>Apply Filters</button>\n                </section>\n            </div>\n\n            {/* Chart */}\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart\n                    data={data}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line\n                        type=\"monotone\"\n                        dataKey=\"reading\"\n                        stroke=\"#8884d8\"\n                        activeDot={{ r: 8 }}\n                    />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}