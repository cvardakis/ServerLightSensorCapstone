{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/MUILineGraph.js\";\n// SensorLineChart.jsx\n\n// import React, { useEffect, useState } from \"react\";\n// import { Box, Typography } from \"@mui/material\";\nimport { LineChart } from \"@mui/x-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MUILineGraph = () => {\n  // const [data, setData] = useState([]);\n  //\n  // // Fetch sensor data from the server\n  // const fetchSensorData = async () => {\n  //     try {\n  //         const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n  //         const result = await response.json();\n  //\n  //         // Sort data chronologically (oldest to newest)\n  //         const sortedData = result.sort(\n  //             (a, b) => new Date(a.utc) - new Date(b.utc)\n  //         );\n  //\n  //         // Map data into a format suitable for our chart.\n  //         // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n  //         const chartData = sortedData.map((point) => ({\n  //             utc: point.utc,\n  //             reading: parseFloat(point.reading),\n  //         }));\n  //\n  //         setData(chartData);\n  //     } catch (error) {\n  //         console.error(\"Error fetching sensor data:\", error);\n  //     }\n  // };\n  //\n  // useEffect(() => {\n  //     fetchSensorData();\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    xAxis: [{\n      data: [1, 2, 3, 5, 8, 10]\n    }],\n    series: [{\n      data: [2, 5.5, 2, 8.5, 1.5, 5]\n    }],\n    width: 500,\n    height: 300\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_c = MUILineGraph;\nexport default MUILineGraph;\nvar _c;\n$RefreshReg$(_c, \"MUILineGraph\");","map":{"version":3,"names":["LineChart","jsxDEV","_jsxDEV","MUILineGraph","xAxis","data","series","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/MUILineGraph.js"],"sourcesContent":["// SensorLineChart.jsx\n\n// import React, { useEffect, useState } from \"react\";\n// import { Box, Typography } from \"@mui/material\";\nimport { LineChart } from \"@mui/x-charts\"\n\n\nconst MUILineGraph = () => {\n    // const [data, setData] = useState([]);\n    //\n    // // Fetch sensor data from the server\n    // const fetchSensorData = async () => {\n    //     try {\n    //         const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n    //         const result = await response.json();\n    //\n    //         // Sort data chronologically (oldest to newest)\n    //         const sortedData = result.sort(\n    //             (a, b) => new Date(a.utc) - new Date(b.utc)\n    //         );\n    //\n    //         // Map data into a format suitable for our chart.\n    //         // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n    //         const chartData = sortedData.map((point) => ({\n    //             utc: point.utc,\n    //             reading: parseFloat(point.reading),\n    //         }));\n    //\n    //         setData(chartData);\n    //     } catch (error) {\n    //         console.error(\"Error fetching sensor data:\", error);\n    //     }\n    // };\n    //\n    // useEffect(() => {\n    //     fetchSensorData();\n    // }, []);\n\n    return (\n        <LineChart\n            xAxis={[{ data: [1, 2, 3, 5, 8, 10] }]}\n            series={[\n                {\n                    data: [2, 5.5, 2, 8.5, 1.5, 5],\n                },\n            ]}\n            width={500}\n            height={300}\n        />\n    );\n};\n\nexport default MUILineGraph;\n"],"mappings":";AAAA;;AAEA;AACA;AACA,SAASA,SAAS,QAAQ,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACID,OAAA,CAACF,SAAS;IACNI,KAAK,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;IAAE,CAAC,CAAE;IACvCC,MAAM,EAAE,CACJ;MACID,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACjC,CAAC,CACH;IACFE,KAAK,EAAE,GAAI;IACXC,MAAM,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV,CAAC;AAACC,EAAA,GA3CIV,YAAY;AA6ClB,eAAeA,YAAY;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}