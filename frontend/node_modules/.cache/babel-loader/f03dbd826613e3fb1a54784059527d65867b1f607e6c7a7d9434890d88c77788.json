{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/graph.js\",\n  _s = $RefreshSig$();\n// SensorLineChart.jsx\n\nimport React, { useEffect, useState } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineGraph = () => {\n  _s();\n  const [data, setData] = useState([]);\n\n  // Fetch sensor data from the server\n  const fetchSensorData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n      const result = await response.json();\n\n      // Sort data chronologically (oldest to newest)\n      const sortedData = result.sort((a, b) => new Date(a.utc) - new Date(b.utc));\n\n      // Map data into a format suitable for our chart.\n      // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n      const chartData = sortedData.map(point => ({\n        utc: point.utc,\n        reading: parseFloat(point.reading)\n      }));\n      setData(chartData);\n    } catch (error) {\n      console.error(\"Error fetching sensor data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchSensorData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: \"100%\",\n      height: 400,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Sensor Reading vs. UTC (Last 12 Hours)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"utc\",\n          tickFormatter: value => new Date(value).toLocaleTimeString(),\n          label: {\n            value: \"UTC Time\",\n            position: \"insideBottom\",\n            offset: -5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          dataKey: \"reading\",\n          label: {\n            value: \"Reading\",\n            angle: -90,\n            position: \"insideLeft\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          labelFormatter: value => new Date(value).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"reading\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(LineGraph, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","LineGraph","_s","data","setData","fetchSensorData","response","fetch","result","json","sortedData","sort","a","b","Date","utc","chartData","map","point","reading","parseFloat","error","console","sx","width","height","margin","children","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","dataKey","tickFormatter","value","toLocaleTimeString","label","position","offset","angle","labelFormatter","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/graph.js"],"sourcesContent":["// SensorLineChart.jsx\n\nimport React, { useEffect, useState } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from \"recharts\";\n\nconst LineGraph = () => {\n    const [data, setData] = useState([]);\n\n    // Fetch sensor data from the server\n    const fetchSensorData = async () => {\n        try {\n            const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n            const result = await response.json();\n\n            // Sort data chronologically (oldest to newest)\n            const sortedData = result.sort(\n                (a, b) => new Date(a.utc) - new Date(b.utc)\n            );\n\n            // Map data into a format suitable for our chart.\n            // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n            const chartData = sortedData.map((point) => ({\n                utc: point.utc,\n                reading: parseFloat(point.reading),\n            }));\n\n            setData(chartData);\n        } catch (error) {\n            console.error(\"Error fetching sensor data:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchSensorData();\n    }, []);\n\n    return (\n        <Box sx={{ width: \"100%\", height: 400, margin: \"auto\" }}>\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\n                Sensor Reading vs. UTC (Last 12 Hours)\n            </Typography>\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                        dataKey=\"utc\"\n                        tickFormatter={(value) =>\n                            new Date(value).toLocaleTimeString()\n                        }\n                        label={{ value: \"UTC Time\", position: \"insideBottom\", offset: -5 }}\n                    />\n                    <YAxis\n                        dataKey=\"reading\"\n                        label={{\n                            value: \"Reading\",\n                            angle: -90,\n                            position: \"insideLeft\",\n                        }}\n                    />\n                    <Tooltip labelFormatter={(value) => new Date(value).toLocaleTimeString()} />\n                    <Legend />\n                    <Line\n                        type=\"monotone\"\n                        dataKey=\"reading\"\n                        stroke=\"#8884d8\"\n                        activeDot={{ r: 8 }}\n                    />\n                </LineChart>\n            </ResponsiveContainer>\n        </Box>\n    );\n};\n\nexport default LineGraph;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,UAAU,QAAQ,eAAe;AAC/C,SACIC,SAAS,EACTC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,mBAAmB,QAChB,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMiB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8C,CAAC;MAC5E,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAEpC;MACA,MAAMC,UAAU,GAAGF,MAAM,CAACG,IAAI,CAC1B,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,GAAG,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,GAAG,CAC9C,CAAC;;MAED;MACA;MACA,MAAMC,SAAS,GAAGN,UAAU,CAACO,GAAG,CAAEC,KAAK,KAAM;QACzCH,GAAG,EAAEG,KAAK,CAACH,GAAG;QACdI,OAAO,EAAEC,UAAU,CAACF,KAAK,CAACC,OAAO;MACrC,CAAC,CAAC,CAAC;MAEHf,OAAO,CAACY,SAAS,CAAC;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAEDlC,SAAS,CAAC,MAAM;IACZkB,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA,CAACX,GAAG;IAACkC,EAAE,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACpD3B,OAAA,CAACV,UAAU;MAACsC,OAAO,EAAC,IAAI;MAACC,KAAK,EAAC,QAAQ;MAACC,YAAY;MAAAH,QAAA,EAAC;IAErD;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACblC,OAAA,CAACF,mBAAmB;MAAC0B,KAAK,EAAC,MAAM;MAACC,MAAM,EAAC,MAAM;MAAAE,QAAA,eAC3C3B,OAAA,CAACT,SAAS;QAACY,IAAI,EAAEA,IAAK;QAAAwB,QAAA,gBAClB3B,OAAA,CAACL,aAAa;UAACwC,eAAe,EAAC;QAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvClC,OAAA,CAACP,KAAK;UACF2C,OAAO,EAAC,KAAK;UACbC,aAAa,EAAGC,KAAK,IACjB,IAAIxB,IAAI,CAACwB,KAAK,CAAC,CAACC,kBAAkB,CAAC,CACtC;UACDC,KAAK,EAAE;YAAEF,KAAK,EAAE,UAAU;YAAEG,QAAQ,EAAE,cAAc;YAAEC,MAAM,EAAE,CAAC;UAAE;QAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtE,CAAC,eACFlC,OAAA,CAACN,KAAK;UACF0C,OAAO,EAAC,SAAS;UACjBI,KAAK,EAAE;YACHF,KAAK,EAAE,SAAS;YAChBK,KAAK,EAAE,CAAC,EAAE;YACVF,QAAQ,EAAE;UACd;QAAE;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACFlC,OAAA,CAACJ,OAAO;UAACgD,cAAc,EAAGN,KAAK,IAAK,IAAIxB,IAAI,CAACwB,KAAK,CAAC,CAACC,kBAAkB,CAAC;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5ElC,OAAA,CAACH,MAAM;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACVlC,OAAA,CAACR,IAAI;UACDqD,IAAI,EAAC,UAAU;UACfT,OAAO,EAAC,SAAS;UACjBU,MAAM,EAAC,SAAS;UAChBC,SAAS,EAAE;YAAEC,CAAC,EAAE;UAAE;QAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEd,CAAC;AAAChC,EAAA,CAlEID,SAAS;AAAAgD,EAAA,GAAThD,SAAS;AAoEf,eAAeA,SAAS;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}