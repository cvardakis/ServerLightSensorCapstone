{"ast":null,"code":"// SensorLineChart.jsx\nimport React,{useEffect,useState}from\"react\";import{Box,Typography}from\"@mui/material\";import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer}from\"recharts\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const LineGraph=()=>{const[data,setData]=useState([]);// Fetch sensor data from the server\nconst fetchSensorData=async()=>{try{const response=await fetch(\"http://localhost:8000/sensorData/last12hours\");const result=await response.json();// Sort data chronologically (oldest to newest)\nconst sortedData=result.sort((a,b)=>new Date(a.utc)-new Date(b.utc));// Map data into a format suitable for our chart.\n// Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\nconst chartData=sortedData.map(point=>({utc:point.utc,reading:parseFloat(point.reading)}));setData(chartData);}catch(error){console.error(\"Error fetching sensor data:\",error);}};useEffect(()=>{fetchSensorData();},[]);return/*#__PURE__*/_jsxs(Box,{sx:{width:\"100%\",height:400,margin:\"auto\"},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",align:\"center\",gutterBottom:true,children:\"Sensor Reading vs. UTC (Last 12 Hours)\"}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(LineChart,{data:data,children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"utc\",tickFormatter:value=>new Date(value).toLocaleTimeString(),label:{value:\"UTC Time\",position:\"insideBottom\",offset:-5}}),/*#__PURE__*/_jsx(YAxis,{dataKey:\"reading\",label:{value:\"Reading\",angle:-90,position:\"insideLeft\"}}),/*#__PURE__*/_jsx(Tooltip,{labelFormatter:value=>new Date(value).toLocaleTimeString()}),/*#__PURE__*/_jsx(Legend,{}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:\"reading\",stroke:\"#8884d8\",activeDot:{r:8}})]})})]});};export default LineGraph;","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsx","_jsx","jsxs","_jsxs","LineGraph","data","setData","fetchSensorData","response","fetch","result","json","sortedData","sort","a","b","Date","utc","chartData","map","point","reading","parseFloat","error","console","sx","width","height","margin","children","variant","align","gutterBottom","strokeDasharray","dataKey","tickFormatter","value","toLocaleTimeString","label","position","offset","angle","labelFormatter","type","stroke","activeDot","r"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/graph.js"],"sourcesContent":["// SensorLineChart.jsx\n\nimport React, { useEffect, useState } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from \"recharts\";\n\nconst LineGraph = () => {\n    const [data, setData] = useState([]);\n\n    // Fetch sensor data from the server\n    const fetchSensorData = async () => {\n        try {\n            const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n            const result = await response.json();\n\n            // Sort data chronologically (oldest to newest)\n            const sortedData = result.sort(\n                (a, b) => new Date(a.utc) - new Date(b.utc)\n            );\n\n            // Map data into a format suitable for our chart.\n            // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n            const chartData = sortedData.map((point) => ({\n                utc: point.utc,\n                reading: parseFloat(point.reading),\n            }));\n\n            setData(chartData);\n        } catch (error) {\n            console.error(\"Error fetching sensor data:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchSensorData();\n    }, []);\n\n    return (\n        <Box sx={{ width: \"100%\", height: 400, margin: \"auto\" }}>\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\n                Sensor Reading vs. UTC (Last 12 Hours)\n            </Typography>\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                        dataKey=\"utc\"\n                        tickFormatter={(value) =>\n                            new Date(value).toLocaleTimeString()\n                        }\n                        label={{ value: \"UTC Time\", position: \"insideBottom\", offset: -5 }}\n                    />\n                    <YAxis\n                        dataKey=\"reading\"\n                        label={{\n                            value: \"Reading\",\n                            angle: -90,\n                            position: \"insideLeft\",\n                        }}\n                    />\n                    <Tooltip labelFormatter={(value) => new Date(value).toLocaleTimeString()} />\n                    <Legend />\n                    <Line\n                        type=\"monotone\"\n                        dataKey=\"reading\"\n                        stroke=\"#8884d8\"\n                        activeDot={{ r: 8 }}\n                    />\n                </LineChart>\n            </ResponsiveContainer>\n        </Box>\n    );\n};\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}