{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\",\n  _s = $RefreshSig$();\n// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineGraph() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n    const fetchUrl = `{$apiUrl}/sensorData/last12hours`;\n    const fetchSensorData = async () => {\n      try {\n        console.log(\"Fetching from:\", fetchUrl);\n        const response = await fetch(fetchUrl, {\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n        console.log(\"Fetched sensor data:\", result);\n\n        // Sort data by utc timestamp (oldest first)\n        const sortedData = result.sort((a, b) => new Date(a.utc) - new Date(b.utc));\n        console.log(\"Sorted sensor data:\", sortedData);\n\n        // Map API data to chart format using keys 'time' and 'reading'\n        const chartData = sortedData.map(item => ({\n          time: new Date(item.utc).toLocaleTimeString(),\n          // x-axis: time\n          reading: parseFloat(item.reading) // y-axis: reading\n        }));\n        console.log(\"Chart data:\", chartData);\n        setData(chartData);\n      } catch (error) {\n        console.error(\"Error fetching sensor data:\", error);\n      }\n    };\n    fetchSensorData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: 400\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), \"  \", /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"reading\",\n          stroke: \"#8884d8\",\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(LineGraph, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","LineGraph","_s","data","setData","apiUrl","process","env","REACT_APP_API_URL","fetchUrl","fetchSensorData","console","log","response","fetch","headers","ok","Error","status","result","json","sortedData","sort","a","b","Date","utc","chartData","map","item","time","toLocaleTimeString","reading","parseFloat","error","style","width","height","children","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["// ReactChartsLine.js\nimport React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\n\nfunction LineGraph() {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n        const fetchUrl = `{$apiUrl}/sensorData/last12hours`;\n\n        const fetchSensorData = async () => {\n            try {\n                console.log(\"Fetching from:\", fetchUrl);\n                const response = await fetch(fetchUrl, {\n                    headers: {\n                        'Accept': 'application/json'\n                    }\n                });\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const result = await response.json();\n                console.log(\"Fetched sensor data:\", result);\n\n                // Sort data by utc timestamp (oldest first)\n                const sortedData = result.sort((a, b) => new Date(a.utc) - new Date(b.utc));\n                console.log(\"Sorted sensor data:\", sortedData);\n\n                // Map API data to chart format using keys 'time' and 'reading'\n                const chartData = sortedData.map((item) => ({\n                    time: new Date(item.utc).toLocaleTimeString(), // x-axis: time\n                    reading: parseFloat(item.reading)               // y-axis: reading\n                }));\n                console.log(\"Chart data:\", chartData);\n\n                setData(chartData);\n            } catch (error) {\n                console.error(\"Error fetching sensor data:\", error);\n            }\n        };\n\n        fetchSensorData();\n    }, []);\n\n    return (\n        <div style={{ width: '100%', height: 400 }}>\n            {/* Debug: Show the JSON data on screen */}\n            <pre>{JSON.stringify(data, null, 2)}</pre>\n\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart\n                    data={data}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />  {/* Using the 'time' key for x-axis */}\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"reading\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}