{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/SensorStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SensorStatus.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SensorStatus() {\n  _s();\n  const [status, setStatus] = useState(null);\n  const [latestMeasurement, setLatestMeasurement] = useState(null);\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      // Use fake data in development for easier testing\n      const fakeData = {\n        value: 21.5,\n        timestamp: new Date().toISOString()\n      };\n      const simulateFetch = () => new Promise(resolve => setTimeout(() => resolve(fakeData), 500));\n      simulateFetch().then(handleData).catch(console.error);\n    } else {\n      // Use the real API call in production\n      fetch('https://utah-skyscope.deno.dev/sensorData/latest').then(res => res.json()).then(handleData).catch(err => console.error('Error fetching sensor status:', err));\n    }\n  }, []);\n  function handleData(data) {\n    setLatestMeasurement(data);\n    if (data && data.timestamp) {\n      const reportedTime = new Date(data.timestamp);\n      const now = new Date();\n      const diffMinutes = (now - reportedTime) / 1000 / 60;\n      setStatus(diffMinutes <= 10 ? 'online' : 'offline');\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // <div className=\"sensor-container\">\n    _jsxDEV(\"div\", {\n      className: \"sensor-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sensor Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          background: status === 'online' ? 'green' : 'red',\n          color: 'white',\n          padding: '10px'\n        },\n        children: status ? status === 'online' ? 'Online' : 'Offline' : 'Loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), latestMeasurement && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Latest Measurement\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 64\n          }, this), latestMeasurement.value, \" mag/arcsec\", /*#__PURE__*/_jsxDEV(\"sup\", {\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 65\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 55\n          }, this), new Date(latestMeasurement.timestamp).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n    // </div>\n  );\n}\n_s(SensorStatus, \"r5ZNB+rLk0gPit0X0dL+uYaJZx0=\");\n_c = SensorStatus;\nexport default SensorStatus;\nvar _c;\n$RefreshReg$(_c, \"SensorStatus\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SensorStatus","_s","status","setStatus","latestMeasurement","setLatestMeasurement","process","env","NODE_ENV","fakeData","value","timestamp","Date","toISOString","simulateFetch","Promise","resolve","setTimeout","then","handleData","catch","console","error","fetch","res","json","err","data","reportedTime","now","diffMinutes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","background","color","padding","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/SensorStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SensorStatus.css'\n\nfunction SensorStatus() {\n    const [status, setStatus] = useState(null);\n    const [latestMeasurement, setLatestMeasurement] = useState(null);\n\n    useEffect(() => {\n        if (process.env.NODE_ENV === 'development') {\n            // Use fake data in development for easier testing\n            const fakeData = {\n                value: 21.5,\n                timestamp: new Date().toISOString()\n            };\n\n            const simulateFetch = () =>\n                new Promise((resolve) => setTimeout(() => resolve(fakeData), 500));\n\n            simulateFetch().then(handleData).catch(console.error);\n        } else {\n            // Use the real API call in production\n            fetch('https://utah-skyscope.deno.dev/sensorData/latest')\n                .then((res) => res.json())\n                .then(handleData)\n                .catch((err) => console.error('Error fetching sensor status:', err));\n        }\n    }, []);\n\n    function handleData(data) {\n        setLatestMeasurement(data);\n        if (data && data.timestamp) {\n            const reportedTime = new Date(data.timestamp);\n            const now = new Date();\n            const diffMinutes = (now - reportedTime) / 1000 / 60;\n            setStatus(diffMinutes <= 10 ? 'online' : 'offline');\n        }\n    }\n\n    return (\n        // <div className=\"sensor-container\">\n            <div className=\"sensor-card\">\n                <h2>Sensor Name</h2>\n                <button\n                    style={{\n                        background: status === 'online' ? 'green' : 'red',\n                        color: 'white',\n                        padding: '10px'\n                    }}\n                >\n                    {status ? (status === 'online' ? 'Online' : 'Offline') : 'Loading...'}\n                </button>\n                {latestMeasurement && (\n                    <div>\n                        <p>\n                            <strong>Latest Measurement</strong><br />\n                            {latestMeasurement.value} mag/arcsec<sup>2</sup>\n                        </p>\n                        <p>\n                            <strong>Timestamp</strong><br />\n                            {new Date(latestMeasurement.timestamp).toLocaleString()}\n                        </p>\n                    </div>\n                )}\n            </div>\n        // </div>\n    );\n}\n\nexport default SensorStatus;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}