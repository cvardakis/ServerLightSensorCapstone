{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/SensorStatus.js\";\n// src/SensorStatus.js\nimport React, { useState, useEffect } from 'react';\nfunction SensorStatus() {\n  const [status, setStatus] = useState(null);\n  const [latestMeasurement, setLatestMeasurement] = useState(null);\n  useEffect(() => {\n    // Replace with your actual Deno server endpoint for the latest measurement\n    fetch('http://your-deno-server/sensorData/latest').then(res => res.json()).then(data => {\n      setLatestMeasurement(data);\n      const reportedTime = new Date(data.timestamp);\n      const now = new Date();\n      const diffMinutes = (now - reportedTime) / 1000 / 60; // difference in minutes\n      setStatus(diffMinutes <= 10 ? 'online' : 'offline');\n    }).catch(err => console.error('Error fetching sensor status:', err));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, \"Sensor Status\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      background: status === 'online' ? 'green' : 'red',\n      color: 'white',\n      padding: '10px',\n      width: '150px',\n      textAlign: 'center',\n      borderRadius: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, status ? status === 'online' ? 'Online' : 'Offline' : 'Loading...'), latestMeasurement && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }, \"Latest Measurement:\"), \" \", latestMeasurement.value, \" mag/arcsec\\xB2\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }, \"Time:\"), \" \", new Date(latestMeasurement.timestamp).toLocaleString())));\n}\nexport default SensorStatus;","map":{"version":3,"names":["React","useState","useEffect","SensorStatus","status","setStatus","latestMeasurement","setLatestMeasurement","fetch","then","res","json","data","reportedTime","Date","timestamp","now","diffMinutes","catch","err","console","error","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","background","color","padding","width","textAlign","borderRadius","marginTop","value","toLocaleString"],"sources":["/Users/connorvardakis/WebstormProjects/DenoLightPollution/frontend/src/SensorStatus.js"],"sourcesContent":["// src/SensorStatus.js\nimport React, { useState, useEffect } from 'react';\n\nfunction SensorStatus() {\n    const [status, setStatus] = useState(null);\n    const [latestMeasurement, setLatestMeasurement] = useState(null);\n\n    useEffect(() => {\n        // Replace with your actual Deno server endpoint for the latest measurement\n        fetch('http://your-deno-server/sensorData/latest')\n            .then((res) => res.json())\n            .then((data) => {\n                setLatestMeasurement(data);\n                const reportedTime = new Date(data.timestamp);\n                const now = new Date();\n                const diffMinutes = (now - reportedTime) / 1000 / 60; // difference in minutes\n                setStatus(diffMinutes <= 10 ? 'online' : 'offline');\n            })\n            .catch((err) => console.error('Error fetching sensor status:', err));\n    }, []);\n\n    return (\n        <div>\n            <h2>Sensor Status</h2>\n            <div\n                style={{\n                    background: status === 'online' ? 'green' : 'red',\n                    color: 'white',\n                    padding: '10px',\n                    width: '150px',\n                    textAlign: 'center',\n                    borderRadius: '5px',\n                }}\n            >\n                {status ? (status === 'online' ? 'Online' : 'Offline') : 'Loading...'}\n            </div>\n            {latestMeasurement && (\n                <div style={{ marginTop: '10px' }}>\n                    <p>\n                        <strong>Latest Measurement:</strong> {latestMeasurement.value} mag/arcsecÂ²\n                    </p>\n                    <p>\n                        <strong>Time:</strong> {new Date(latestMeasurement.timestamp).toLocaleString()}\n                    </p>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default SensorStatus;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}