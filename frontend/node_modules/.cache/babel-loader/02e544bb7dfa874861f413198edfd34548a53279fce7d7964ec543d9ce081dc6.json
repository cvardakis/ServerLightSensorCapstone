{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\";\nimport React, { PureComponent } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [data, setData] = useState([]);\n\n// Fetch sensor data from the server\nconst fetchSensorData = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n    const result = await response.json();\n\n    // Sort data chronologically (oldest to newest)\n    const sortedData = result.sort((a, b) => new Date(a.utc) - new Date(b.utc));\n\n    // Map data into a format suitable for our chart.\n    // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n    const chartData = sortedData.map(point => ({\n      utc: point.utc,\n      reading: parseFloat(point.reading)\n    }));\n    setData(chartData);\n  } catch (error) {\n    console.error(\"Error fetching sensor data:\", error);\n  }\n};\nuseEffect(() => {\n  fetchSensorData();\n}, []);\nfunction LineGraph() {\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 500,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"reading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"utc\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"pv\",\n        stroke: \"#8884d8\",\n        activeDot: {\n          r: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"uv\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_c = LineGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"names":["React","PureComponent","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","data","setData","useState","fetchSensorData","response","fetch","result","json","sortedData","sort","a","b","Date","utc","chartData","map","point","reading","parseFloat","error","console","useEffect","LineGraph","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nconst [data, setData] = useState([]);\n\n// Fetch sensor data from the server\nconst fetchSensorData = async () => {\n    try {\n        const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n        const result = await response.json();\n\n        // Sort data chronologically (oldest to newest)\n        const sortedData = result.sort(\n            (a, b) => new Date(a.utc) - new Date(b.utc)\n        );\n\n        // Map data into a format suitable for our chart.\n        // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n        const chartData = sortedData.map((point) => ({\n            utc: point.utc,\n            reading: parseFloat(point.reading),\n        }));\n\n        setData(chartData);\n    } catch (error) {\n        console.error(\"Error fetching sensor data:\", error);\n    }\n};\n\nuseEffect(() => {\n    fetchSensorData();\n}, []);\n\nfunction LineGraph() {\n    return (\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5,\n                    right: 30,\n                    left: 20,\n                    bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"reading\" />\n                <YAxis dataKey=\"utc\"/>\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default LineGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}