{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./SensorStatus.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function SensorStatusList(){const[sensorMeasurements,setSensorMeasurements]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{// ← here’s the only change:\nconst apiBase=process.env.NODE_ENV==='development'?'http://localhost:8000':'https://utah-skyscope.deno.dev';fetch(`${apiBase}/sensors`).then(res=>res.json()).then(sensors=>Promise.all(sensors.map(_ref=>{let{name,sensor_id}=_ref;return fetch(`${apiBase}/sensorData/latest?sensorId=${sensor_id}`).then(r=>r.json()).then(data=>({name,id:sensor_id,data})).catch(()=>({name,id:sensor_id,error:true}));}))).then(results=>{setSensorMeasurements(results);setLoading(false);}).catch(err=>{console.error(\"Error fetching sensors or data:\",err);setLoading(false);});},[]);if(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading sensors\\u2026\"});return/*#__PURE__*/_jsx(\"div\",{className:\"sensor-status-container\",children:sensorMeasurements.map(_ref2=>{let{name,id,data,error}=_ref2;if(error||!data||data.error){return/*#__PURE__*/_jsxs(\"div\",{className:\"sensor-card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:name}),/*#__PURE__*/_jsx(\"p\",{children:\"Error loading data.\"})]},id);}const reported=new Date(data.timestamp);const minutesAgo=(Date.now()-reported.getTime())/1000/60;const status=minutesAgo<=10?'online':'offline';return/*#__PURE__*/_jsxs(\"div\",{className:\"sensor-card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:name}),/*#__PURE__*/_jsx(\"button\",{style:{background:status==='online'?'green':'red',color:'white',padding:'10px'},children:status==='online'?'Online':'Offline'}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Latest Measurement\"}),/*#__PURE__*/_jsx(\"br\",{}),data.value,\" mag/arcsec\",/*#__PURE__*/_jsx(\"sup\",{children:\"2\"})]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Local Timestamp\"}),/*#__PURE__*/_jsx(\"br\",{}),new Date(data.timestamp).toLocaleString('en-US',{month:'2-digit',day:'2-digit',year:'numeric',hour:'2-digit',minute:'2-digit',hour12:false})]})]})]},id);})});}export default SensorStatusList;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","SensorStatusList","sensorMeasurements","setSensorMeasurements","loading","setLoading","apiBase","process","env","NODE_ENV","fetch","then","res","json","sensors","Promise","all","map","_ref","name","sensor_id","r","data","id","catch","error","results","err","console","children","className","_ref2","reported","Date","timestamp","minutesAgo","now","getTime","status","style","background","color","padding","value","toLocaleString","month","day","year","hour","minute","hour12"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/SensorStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SensorStatus.css';\n\nfunction SensorStatusList() {\n    const [sensorMeasurements, setSensorMeasurements] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        // ← here’s the only change:\n        const apiBase = process.env.NODE_ENV === 'development'\n            ? 'http://localhost:8000'\n            : 'https://utah-skyscope.deno.dev';\n\n        fetch(`${apiBase}/sensors`)\n            .then(res => res.json())\n            .then(sensors =>\n                Promise.all(\n                    sensors.map(({ name, sensor_id }) =>\n                        fetch(`${apiBase}/sensorData/latest?sensorId=${sensor_id}`)\n                            .then(r => r.json())\n                            .then(data => ({ name, id: sensor_id, data }))\n                            .catch(() => ({ name, id: sensor_id, error: true }))\n                    )\n                )\n            )\n            .then(results => {\n                setSensorMeasurements(results);\n                setLoading(false);\n            })\n            .catch(err => {\n                console.error(\"Error fetching sensors or data:\", err);\n                setLoading(false);\n            });\n    }, []);\n\n    if (loading) return <p>Loading sensors…</p>;\n\n    return (\n        <div className=\"sensor-status-container\">\n            {sensorMeasurements.map(({ name, id, data, error }) => {\n                if (error || !data || data.error) {\n                    return (\n                        <div key={id} className=\"sensor-card\">\n                            <h2>{name}</h2>\n                            <p>Error loading data.</p>\n                        </div>\n                    );\n                }\n\n                const reported = new Date(data.timestamp);\n                const minutesAgo = (Date.now() - reported.getTime()) / 1000 / 60;\n                const status = minutesAgo <= 10 ? 'online' : 'offline';\n\n                return (\n                    <div key={id} className=\"sensor-card\">\n                        <h2>{name}</h2>\n                        <button\n                            style={{\n                                background: status === 'online' ? 'green' : 'red',\n                                color: 'white',\n                                padding: '10px'\n                            }}\n                        >\n                            {status === 'online' ? 'Online' : 'Offline'}\n                        </button>\n\n                        <div>\n                            <p>\n                                <strong>Latest Measurement</strong><br/>\n                                {data.value} mag/arcsec<sup>2</sup>\n                            </p>\n                            <p>\n                                <strong>Local Timestamp</strong><br/>\n                                {new Date(data.timestamp).toLocaleString('en-US', {\n                                    month:    '2-digit',\n                                    day:      '2-digit',\n                                    year:     'numeric',\n                                    hour:     '2-digit',\n                                    minute:   '2-digit',\n                                    hour12:   false\n                                })}\n\n\n                            </p>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default SensorStatusList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}