{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './ReactChartsLine.css';\n\n// Custom tooltip to display multiple sensor readings with formatted time\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTooltip = ({\n  active,\n  payload,\n  label\n}) => {\n  if (!active || !payload || payload.length === 0) return null;\n  const timeLabel = new Date(label).toLocaleTimeString('en-GB', {\n    hour12: false,\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#fff',\n      border: '1px solid #ccc',\n      padding: '0.5rem',\n      color: '#000'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontWeight: 'bold',\n        marginBottom: 4\n      },\n      children: [\"Time: \", timeLabel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), payload.map(entry => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: entry.color,\n        fontWeight: 'bold'\n      },\n      children: [entry.name, \": \", entry.value]\n    }, entry.dataKey, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_c = CustomTooltip;\nfunction LineGraph() {\n  _s();\n  // Core state\n  const [data, setData] = useState([]);\n  const [sensors, setSensors] = useState([]);\n  const [selectedSensors, setSelectedSensors] = useState([]);\n  const [initialized, setInitialized] = useState(false);\n\n  // Date/time filters (local, rounded on mount)\n  const [startDate, setStartDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [endTime, setEndTime] = useState('');\n\n  // Y-axis customization\n  const [yMin, setYMin] = useState('');\n  const [yMax, setYMax] = useState('');\n  const [yStep, setYStep] = useState(5);\n  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Toggle sensor selection (at least one remains)\n  const toggleSensor = sensorId => {\n    setSelectedSensors(prev => {\n      if (prev.includes(sensorId)) {\n        if (prev.length === 1) return prev;\n        return prev.filter(id => id !== sensorId);\n      }\n      return [...prev, sensorId];\n    });\n  };\n\n  // CSV download (current view only)\n  const downloadCSV = () => {\n    if (!data.length) return;\n    const sensorList = sensors.filter(s => selectedSensors.includes(s.sensor_id));\n    const sensorIds = sensorList.map(s => s.sensor_id);\n    const sensorNames = sensorList.map(s => s.name);\n    const headerRow = ['Timestamp', ...sensorNames];\n    const rows = data.map(d => {\n      const row = [new Date(d.timestamp).toISOString()];\n      sensorIds.forEach(id => {\n        row.push(d[id] != null ? d[id] : '');\n      });\n      return row;\n    });\n    const csvContent = [headerRow, ...rows].map(r => r.map(cell => `\"${cell}\"`).join(',')).join('\\r\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'Utah-skyscope-data.csv';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // On mount: fetch sensors & set default filters rounded to nearest 5 minutes\n  useEffect(() => {\n    const pad = n => String(n).padStart(2, '0');\n    const roundToNearest5Min = date => {\n      const ms = date.getTime();\n      const step = 1000 * 60 * 5;\n      return new Date(Math.floor(ms / step) * step);\n    };\n    const now = new Date();\n    const roundedNow = roundToNearest5Min(now);\n    const startObj = roundToNearest5Min(new Date(roundedNow.getTime() - 12 * 3600 * 1000));\n    setStartDate(`${startObj.getFullYear()}-${pad(startObj.getMonth() + 1)}-${pad(startObj.getDate())}`);\n    setStartTime(`${pad(startObj.getHours())}:${pad(startObj.getMinutes())}`);\n    setEndDate(`${roundedNow.getFullYear()}-${pad(roundedNow.getMonth() + 1)}-${pad(roundedNow.getDate())}`);\n    setEndTime(`${pad(roundedNow.getHours())}:${pad(roundedNow.getMinutes())}`);\n    fetch(`${apiUrl}/sensors`).then(res => res.json()).then(list => {\n      setSensors(list);\n      setSelectedSensors(list.map(s => s.sensor_id));\n      setInitialized(true);\n    }).catch(console.error);\n  }, [apiUrl]);\n\n  // Polling fetch: process data and adjust Y-axis on each pull\n  useEffect(() => {\n    if (!initialized) return;\n    const fetchAndProcess = () => {\n      const params = new URLSearchParams();\n      if (selectedSensors.length) params.append('sensor', selectedSensors.join(','));\n      if (startDate) params.append('startDate', startDate);\n      if (startTime) params.append('startTime', startTime);\n      if (endDate) params.append('endDate', endDate);\n      if (endTime) params.append('endTime', endTime);\n      fetch(`${apiUrl}/sensorData/filter?${params.toString()}`).then(res => res.json()).then(result => {\n        const grouped = {};\n        const readingsList = [];\n        result.forEach(item => {\n          const ts = new Date(item.local).getTime();\n          if (!grouped[ts]) grouped[ts] = {\n            timestamp: ts\n          };\n          grouped[ts][item.sensor_id] = parseFloat(item.reading);\n          readingsList.push(parseFloat(item.reading));\n        });\n        const dataArr = Object.values(grouped);\n\n        // Compute new Y domain\n        const maxReading = readingsList.length ? Math.max(...readingsList) : 0;\n        const roundedMax = Math.ceil(maxReading / yStep) * yStep;\n        setYMin('0');\n        setYMax(roundedMax.toString());\n        setData(dataArr);\n      }).catch(console.error);\n    };\n    fetchAndProcess();\n    const intervalId = setInterval(fetchAndProcess, 60000);\n    return () => clearInterval(intervalId);\n  }, [startDate, startTime, endDate, endTime, selectedSensors, initialized, apiUrl, yStep]);\n\n  // Derive start/end timestamps from filters\n  const startTs = startDate && startTime ? new Date(`${startDate}T${startTime}`).getTime() : 0;\n  const endTs = endDate && endTime ? new Date(`${endDate}T${endTime}`).getTime() : Date.now();\n\n  // Generate X ticks at full hour boundaries\n  const xTicks = [];\n  if (startTs && endTs) {\n    let firstTick = new Date(startTs);\n    firstTick.setMinutes(0, 0, 0);\n    if (firstTick.getTime() < startTs) {\n      firstTick = new Date(firstTick.getTime() + 3600 * 1000);\n    }\n    for (let t = firstTick.getTime(); t <= endTs; t += 3600 * 1000) {\n      xTicks.push(t);\n    }\n  }\n\n  // Generate Y ticks\n  const yMinNum = Number(yMin);\n  const yMaxNum = Number(yMax);\n  const yTicks = [];\n  for (let v = yMinNum; v <= yMaxNum; v += yStep) {\n    yTicks.push(v);\n  }\n  const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#a4de6c'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: 600\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menuContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Sensor Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensor-options\",\n          children: sensors.map(sensor => /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: 12\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedSensors.includes(sensor.sensor_id),\n              onChange: () => toggleSensor(sensor.sensor_id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 33\n            }, this), sensor.name]\n          }, sensor.sensor_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Date and Range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"range-selector\",\n          style: {\n            display: 'flex',\n            justifyContent: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Start Date\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: startDate,\n                onChange: e => setStartDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Start Time\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                step: \"300\",\n                value: startTime,\n                onChange: e => setStartTime(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"End Date\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: endDate,\n                onChange: e => setEndDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                marginLeft: 12\n              },\n              children: [\"End Time\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                step: \"300\",\n                value: endTime,\n                onChange: e => setEndTime(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Data Options & CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadCSV,\n          children: \"Download as CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        margin: {\n          top: 20,\n          right: 10,\n          bottom: 80,\n          left: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\",\n          type: \"number\",\n          domain: [startTs, endTs],\n          ticks: xTicks,\n          tickFormatter: ms => new Date(ms).toLocaleTimeString('en-GB', {\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }),\n          label: {\n            value: 'Local Time',\n            position: 'bottom',\n            offset: 20,\n            style: {\n              fontWeight: 'bold'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          domain: [yMin !== '' ? Number(yMin) : 'auto', yMax !== '' ? Number(yMax) : 'auto'],\n          ticks: yTicks,\n          label: {\n            value: 'mag/arcsec²',\n            angle: -90,\n            position: 'insideLeft',\n            dy: 50,\n            style: {\n              fontWeight: 'bold'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          verticalAlign: \"top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), sensors.filter(s => selectedSensors.includes(s.sensor_id)).map((sensor, idx) => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: sensor.sensor_id,\n          name: sensor.name,\n          stroke: colors[idx % colors.length],\n          dot: false\n        }, sensor.sensor_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n}\n_s(LineGraph, \"z6Kpc4nTCZ2vz6nudsZ43KTOJqo=\");\n_c2 = LineGraph;\nexport default LineGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","CustomTooltip","active","payload","label","length","timeLabel","Date","toLocaleTimeString","hour12","hour","minute","second","style","backgroundColor","border","padding","color","children","fontWeight","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","map","entry","name","value","dataKey","_c","LineGraph","_s","data","setData","sensors","setSensors","selectedSensors","setSelectedSensors","initialized","setInitialized","startDate","setStartDate","startTime","setStartTime","endDate","setEndDate","endTime","setEndTime","yMin","setYMin","yMax","setYMax","yStep","setYStep","apiUrl","process","env","REACT_APP_API_URL","toggleSensor","sensorId","prev","includes","filter","id","downloadCSV","sensorList","s","sensor_id","sensorIds","sensorNames","headerRow","rows","d","row","timestamp","toISOString","forEach","push","csvContent","r","cell","join","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","pad","n","String","padStart","roundToNearest5Min","date","ms","getTime","step","Math","floor","now","roundedNow","startObj","getFullYear","getMonth","getDate","getHours","getMinutes","fetch","then","res","json","list","catch","console","error","fetchAndProcess","params","URLSearchParams","append","toString","result","grouped","readingsList","item","ts","local","parseFloat","reading","dataArr","Object","values","maxReading","max","roundedMax","ceil","intervalId","setInterval","clearInterval","startTs","endTs","xTicks","firstTick","setMinutes","t","yMinNum","Number","yMaxNum","yTicks","v","colors","width","height","className","sensor","marginRight","checked","onChange","display","justifyContent","e","target","marginLeft","onClick","margin","top","right","bottom","left","strokeDasharray","domain","ticks","tickFormatter","position","offset","angle","dy","content","verticalAlign","idx","stroke","dot","_c2","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\nimport './ReactChartsLine.css';\n\n// Custom tooltip to display multiple sensor readings with formatted time\nconst CustomTooltip = ({ active, payload, label }) => {\n    if (!active || !payload || payload.length === 0) return null;\n    const timeLabel = new Date(label).toLocaleTimeString('en-GB', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n    });\n    return (\n        <div style={{ backgroundColor: '#fff', border: '1px solid #ccc', padding: '0.5rem', color: '#000' }}>\n            <div style={{ fontWeight: 'bold', marginBottom: 4 }}>Time: {timeLabel}</div>\n            {payload.map((entry) => (\n                <div key={entry.dataKey} style={{ color: entry.color, fontWeight: 'bold' }}>\n                    {entry.name}: {entry.value}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nfunction LineGraph() {\n    // Core state\n    const [data, setData] = useState([]);\n    const [sensors, setSensors] = useState([]);\n    const [selectedSensors, setSelectedSensors] = useState([]);\n    const [initialized, setInitialized] = useState(false);\n\n    // Date/time filters (local, rounded on mount)\n    const [startDate, setStartDate] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [endTime, setEndTime] = useState('');\n\n    // Y-axis customization\n    const [yMin, setYMin] = useState('');\n    const [yMax, setYMax] = useState('');\n    const [yStep, setYStep] = useState(5);\n\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n    // Toggle sensor selection (at least one remains)\n    const toggleSensor = (sensorId) => {\n        setSelectedSensors((prev) => {\n            if (prev.includes(sensorId)) {\n                if (prev.length === 1) return prev;\n                return prev.filter((id) => id !== sensorId);\n            }\n            return [...prev, sensorId];\n        });\n    };\n\n    // CSV download (current view only)\n    const downloadCSV = () => {\n        if (!data.length) return;\n        const sensorList = sensors.filter((s) => selectedSensors.includes(s.sensor_id));\n        const sensorIds = sensorList.map((s) => s.sensor_id);\n        const sensorNames = sensorList.map((s) => s.name);\n        const headerRow = ['Timestamp', ...sensorNames];\n        const rows = data.map((d) => {\n            const row = [new Date(d.timestamp).toISOString()];\n            sensorIds.forEach((id) => {\n                row.push(d[id] != null ? d[id] : '');\n            });\n            return row;\n        });\n        const csvContent = [headerRow, ...rows]\n            .map((r) => r.map((cell) => `\"${cell}\"`).join(','))\n            .join('\\r\\n');\n        const blob = new Blob([csvContent], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'Utah-skyscope-data.csv';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    };\n\n    // On mount: fetch sensors & set default filters rounded to nearest 5 minutes\n    useEffect(() => {\n        const pad = (n) => String(n).padStart(2, '0');\n        const roundToNearest5Min = (date) => {\n            const ms = date.getTime();\n            const step = 1000 * 60 * 5;\n            return new Date(Math.floor(ms / step) * step);\n        };\n\n        const now = new Date();\n        const roundedNow = roundToNearest5Min(now);\n        const startObj = roundToNearest5Min(new Date(roundedNow.getTime() - 12 * 3600 * 1000));\n\n        setStartDate(`${startObj.getFullYear()}-${pad(startObj.getMonth() + 1)}-${pad(startObj.getDate())}`);\n        setStartTime(`${pad(startObj.getHours())}:${pad(startObj.getMinutes())}`);\n        setEndDate(`${roundedNow.getFullYear()}-${pad(roundedNow.getMonth() + 1)}-${pad(roundedNow.getDate())}`);\n        setEndTime(`${pad(roundedNow.getHours())}:${pad(roundedNow.getMinutes())}`);\n\n        fetch(`${apiUrl}/sensors`)\n            .then((res) => res.json())\n            .then((list) => {\n                setSensors(list);\n                setSelectedSensors(list.map((s) => s.sensor_id));\n                setInitialized(true);\n            })\n            .catch(console.error);\n    }, [apiUrl]);\n\n    // Polling fetch: process data and adjust Y-axis on each pull\n    useEffect(() => {\n        if (!initialized) return;\n\n        const fetchAndProcess = () => {\n            const params = new URLSearchParams();\n            if (selectedSensors.length) params.append('sensor', selectedSensors.join(','));\n            if (startDate) params.append('startDate', startDate);\n            if (startTime) params.append('startTime', startTime);\n            if (endDate) params.append('endDate', endDate);\n            if (endTime) params.append('endTime', endTime);\n\n            fetch(`${apiUrl}/sensorData/filter?${params.toString()}`)\n                .then((res) => res.json())\n                .then((result) => {\n                    const grouped = {};\n                    const readingsList = [];\n                    result.forEach((item) => {\n                        const ts = new Date(item.local).getTime();\n                        if (!grouped[ts]) grouped[ts] = { timestamp: ts };\n                        grouped[ts][item.sensor_id] = parseFloat(item.reading);\n                        readingsList.push(parseFloat(item.reading));\n                    });\n                    const dataArr = Object.values(grouped);\n\n                    // Compute new Y domain\n                    const maxReading = readingsList.length ? Math.max(...readingsList) : 0;\n                    const roundedMax = Math.ceil(maxReading / yStep) * yStep;\n                    setYMin('0');\n                    setYMax(roundedMax.toString());\n\n                    setData(dataArr);\n                })\n                .catch(console.error);\n        };\n\n        fetchAndProcess();\n        const intervalId = setInterval(fetchAndProcess, 60000);\n        return () => clearInterval(intervalId);\n    }, [startDate, startTime, endDate, endTime, selectedSensors, initialized, apiUrl, yStep]);\n\n    // Derive start/end timestamps from filters\n    const startTs = startDate && startTime\n        ? new Date(`${startDate}T${startTime}`).getTime()\n        : 0;\n    const endTs = endDate && endTime\n        ? new Date(`${endDate}T${endTime}`).getTime()\n        : Date.now();\n\n    // Generate X ticks at full hour boundaries\n    const xTicks = [];\n    if (startTs && endTs) {\n        let firstTick = new Date(startTs);\n        firstTick.setMinutes(0, 0, 0);\n        if (firstTick.getTime() < startTs) {\n            firstTick = new Date(firstTick.getTime() + 3600 * 1000);\n        }\n        for (let t = firstTick.getTime(); t <= endTs; t += 3600 * 1000) {\n            xTicks.push(t);\n        }\n    }\n\n    // Generate Y ticks\n    const yMinNum = Number(yMin);\n    const yMaxNum = Number(yMax);\n    const yTicks = [];\n    for (let v = yMinNum; v <= yMaxNum; v += yStep) {\n        yTicks.push(v);\n    }\n\n    const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#a4de6c'];\n\n    return (\n        <div style={{ width: '100%', height: 600 }}>\n            <div className=\"menuContainer\">\n                <section className=\"section1\">\n                    <h4>Sensor Selection</h4>\n                    <div className=\"sensor-options\">\n                        {sensors.map((sensor) => (\n                            <label key={sensor.sensor_id} style={{ marginRight: 12 }}>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={selectedSensors.includes(sensor.sensor_id)}\n                                    onChange={() => toggleSensor(sensor.sensor_id)}\n                                />\n                                {sensor.name}\n                            </label>\n                        ))}\n                    </div>\n                </section>\n\n                <section className=\"section2\">\n                    <h4>Date and Range</h4>\n                    <div className=\"range-selector\" style={{ display: 'flex', justifyContent: 'center' }}>\n                        <div>\n                            <label>\n                                Start Date<br/>\n                                <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\n                            </label><br/>\n                            <label>\n                                Start Time<br/>\n                                <input type=\"time\" step=\"300\" value={startTime} onChange={(e) => setStartTime(e.target.value)} />\n                            </label>\n                        </div>\n                        <div>\n                            <label>\n                                End Date<br/>\n                                <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\n                            </label><br/>\n                            <label style={{ marginLeft: 12 }}>\n                                End Time<br/>\n                                <input type=\"time\" step=\"300\" value={endTime} onChange={(e) => setEndTime(e.target.value)} />\n                            </label>\n                        </div>\n                    </div>\n                </section>\n\n                <section className=\"section3\">\n                    <h4>Data Options & CSV</h4>\n                    <button onClick={downloadCSV}>Download as CSV</button>\n                </section>\n            </div>\n\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data} margin={{ top: 20, right: 10, bottom: 80, left: 10 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                        dataKey=\"timestamp\"\n                        type=\"number\"\n                        domain={[startTs, endTs]}\n                        ticks={xTicks}\n                        tickFormatter={(ms) =>\n                            new Date(ms).toLocaleTimeString('en-GB', {\n                                hour12: false,\n                                hour: '2-digit',\n                                minute: '2-digit',\n                                second: '2-digit',\n                            })\n                        }\n                        label={{ value: 'Local Time', position: 'bottom', offset: 20, style: { fontWeight: 'bold' } }}\n                    />\n                    <YAxis\n                        domain={[yMin !== '' ? Number(yMin) : 'auto', yMax !== '' ? Number(yMax) : 'auto']}\n                        ticks={yTicks}\n                        label={{ value: 'mag/arcsec²', angle: -90, position: 'insideLeft', dy: 50, style: { fontWeight: 'bold' } }}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend verticalAlign=\"top\" />\n                    {sensors\n                        .filter((s) => selectedSensors.includes(s.sensor_id))\n                        .map((sensor, idx) => (\n                            <Line\n                                key={sensor.sensor_id}\n                                type=\"monotone\"\n                                dataKey={sensor.sensor_id}\n                                name={sensor.name}\n                                stroke={colors[idx % colors.length]}\n                                dot={false}\n                            />\n                        ))}\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}