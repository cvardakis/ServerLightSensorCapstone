{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './ReactChartsLine.css';\n\n// Custom tooltip to display multiple sensor readings\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTooltip = ({\n  active,\n  payload,\n  label\n}) => {\n  if (!active || !payload || payload.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#fff',\n      border: '1px solid #ccc',\n      padding: '0.5rem',\n      color: '#000'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontWeight: 'bold',\n        marginBottom: 4\n      },\n      children: [\"Time: \", label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), payload.map(entry => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: entry.color,\n        fontWeight: 'bold'\n      },\n      children: [entry.name, \": \", entry.value]\n    }, entry.dataKey, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_c = CustomTooltip;\nfunction LineGraph() {\n  _s();\n  // Chart data state\n  const [data, setData] = useState([]);\n  // Sensor selection state\n  const [selectedSensors, setSelectedSensors] = useState([]);\n  const [sensors, setSensors] = useState([]);\n  // Date/time filters state\n  const [startDate, setStartDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [endTime, setEndTime] = useState('');\n  // Initialization flag\n  const [initialized, setInitialized] = useState(false);\n  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Toggle sensor in selection (at least one remains)\n  const toggleSensor = sensorId => {\n    setSelectedSensors(prev => {\n      if (prev.includes(sensorId)) {\n        if (prev.length === 1) return prev;\n        return prev.filter(id => id !== sensorId);\n      }\n      return [...prev, sensorId];\n    });\n  };\n\n  // Stub CSV download\n  const downloadCSV = () => console.log('Download CSV placeholder');\n\n  // Fetch sensor list and set default date/time\n  useEffect(() => {\n    const pad = n => String(n).padStart(2, '0');\n    const now = new Date();\n    const end = now;\n    const start = new Date(now.getTime() - 12 * 3600 * 1000);\n    setStartDate(`${start.getFullYear()}-${pad(start.getMonth() + 1)}-${pad(start.getDate())}`);\n    setStartTime(`${pad(start.getHours())}:${pad(start.getMinutes())}`);\n    setEndDate(`${end.getFullYear()}-${pad(end.getMonth() + 1)}-${pad(end.getDate())}`);\n    setEndTime(`${pad(end.getHours())}:${pad(end.getMinutes())}`);\n    fetch(`${apiUrl}/sensors`).then(res => res.json()).then(list => {\n      setSensors(list);\n      setSelectedSensors(list.map(s => s.sensor_id));\n      setInitialized(true);\n    }).catch(console.error);\n  }, [apiUrl]);\n\n  // Fetch and group data whenever filters change\n  useEffect(() => {\n    if (!initialized) return;\n    const params = new URLSearchParams();\n    if (selectedSensors.length) params.append('sensor', selectedSensors.join(','));\n    if (startDate) params.append('startDate', startDate);\n    if (startTime) params.append('startTime', startTime);\n    if (endDate) params.append('endDate', endDate);\n    if (endTime) params.append('endTime', endTime);\n    console.log('Fetching sensor data with params:', params.toString());\n    fetch(`${apiUrl}/sensorData/filter?${params.toString()}`).then(res => res.json()).then(result => {\n      const grouped = {};\n      result.forEach(item => {\n        const timeStr = new Date(item.local).toLocaleString('en-GB', {\n          hour12: false,\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        });\n        if (!grouped[timeStr]) grouped[timeStr] = {\n          time: timeStr\n        };\n        grouped[timeStr][item.sensor_id] = parseFloat(item.reading);\n      });\n      setData(Object.values(grouped));\n    }).catch(console.error);\n  }, [startDate, startTime, endDate, endTime, selectedSensors, initialized, apiUrl]);\n\n  // Color palette for lines\n  const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#a4de6c'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: 500\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menuContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Sensor Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensor-options\",\n          children: sensors.map(sensor => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedSensors.includes(sensor.sensor_id),\n              onChange: () => toggleSensor(sensor.sensor_id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 33\n            }, this), sensor.name]\n          }, sensor.sensor_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Date and Range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"range-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: startDate,\n                onChange: e => setStartDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                step: \"300\",\n                value: startTime,\n                onChange: e => setStartTime(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                value: endDate,\n                onChange: e => setEndDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                step: \"300\",\n                value: endTime,\n                onChange: e => setEndTime(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Data Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadCSV,\n          children: \"Download as CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        margin: {\n          top: 20,\n          right: 10,\n          bottom: 80,\n          left: 60\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\",\n          label: {\n            value: 'Local Time',\n            position: 'bottom',\n            offset: 20,\n            style: {\n              fontWeight: 'bold'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: 'mag/arcsec²',\n            angle: -90,\n            position: 'insideLeft',\n            dy: 50,\n            style: {\n              fontWeight: 'bold'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          verticalAlign: \"top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), sensors.filter(s => selectedSensors.includes(s.sensor_id)).map((sensor, idx) => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: sensor.sensor_id,\n          name: sensor.name,\n          stroke: colors[idx % colors.length],\n          dot: false\n        }, sensor.sensor_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n_s(LineGraph, \"LhoM60yBWS4yAaulv8HLrjMWvXA=\");\n_c2 = LineGraph;\nexport default LineGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"LineGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","CustomTooltip","active","payload","label","length","style","backgroundColor","border","padding","color","children","fontWeight","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","map","entry","name","value","dataKey","_c","LineGraph","_s","data","setData","selectedSensors","setSelectedSensors","sensors","setSensors","startDate","setStartDate","startTime","setStartTime","endDate","setEndDate","endTime","setEndTime","initialized","setInitialized","apiUrl","process","env","REACT_APP_API_URL","toggleSensor","sensorId","prev","includes","filter","id","downloadCSV","console","log","pad","n","String","padStart","now","Date","end","start","getTime","getFullYear","getMonth","getDate","getHours","getMinutes","fetch","then","res","json","list","s","sensor_id","catch","error","params","URLSearchParams","append","join","toString","result","grouped","forEach","item","timeStr","local","toLocaleString","hour12","hour","minute","second","time","parseFloat","reading","Object","values","colors","width","height","className","sensor","type","checked","onChange","e","target","step","onClick","margin","top","right","bottom","left","strokeDasharray","position","offset","angle","dy","content","verticalAlign","idx","stroke","dot","_c2","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/ReactChartsLine.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\nimport './ReactChartsLine.css';\n\n// Custom tooltip to display multiple sensor readings\nconst CustomTooltip = ({ active, payload, label }) => {\n    if (!active || !payload || payload.length === 0) return null;\n    return (\n        <div style={{ backgroundColor: '#fff', border: '1px solid #ccc', padding: '0.5rem', color: '#000' }}>\n            <div style={{ fontWeight: 'bold', marginBottom: 4 }}>Time: {label}</div>\n            {payload.map((entry) => (\n                <div key={entry.dataKey} style={{ color: entry.color, fontWeight: 'bold' }}>\n                    {entry.name}: {entry.value}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nfunction LineGraph() {\n    // Chart data state\n    const [data, setData] = useState([]);\n    // Sensor selection state\n    const [selectedSensors, setSelectedSensors] = useState([]);\n    const [sensors, setSensors] = useState([]);\n    // Date/time filters state\n    const [startDate, setStartDate] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [endTime, setEndTime] = useState('');\n    // Initialization flag\n    const [initialized, setInitialized] = useState(false);\n\n    const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n    // Toggle sensor in selection (at least one remains)\n    const toggleSensor = (sensorId) => {\n        setSelectedSensors((prev) => {\n            if (prev.includes(sensorId)) {\n                if (prev.length === 1) return prev;\n                return prev.filter((id) => id !== sensorId);\n            }\n            return [...prev, sensorId];\n        });\n    };\n\n    // Stub CSV download\n    const downloadCSV = () => console.log('Download CSV placeholder');\n\n    // Fetch sensor list and set default date/time\n    useEffect(() => {\n        const pad = (n) => String(n).padStart(2, '0');\n        const now = new Date();\n        const end = now;\n        const start = new Date(now.getTime() - 12 * 3600 * 1000);\n        setStartDate(`${start.getFullYear()}-${pad(start.getMonth()+1)}-${pad(start.getDate())}`);\n        setStartTime(`${pad(start.getHours())}:${pad(start.getMinutes())}`);\n        setEndDate(`${end.getFullYear()}-${pad(end.getMonth()+1)}-${pad(end.getDate())}`);\n        setEndTime(`${pad(end.getHours())}:${pad(end.getMinutes())}`);\n\n        fetch(`${apiUrl}/sensors`)\n            .then((res) => res.json())\n            .then((list) => {\n                setSensors(list);\n                setSelectedSensors(list.map((s) => s.sensor_id));\n                setInitialized(true);\n            })\n            .catch(console.error);\n    }, [apiUrl]);\n\n    // Fetch and group data whenever filters change\n    useEffect(() => {\n        if (!initialized) return;\n        const params = new URLSearchParams();\n        if (selectedSensors.length) params.append('sensor', selectedSensors.join(','));\n        if (startDate) params.append('startDate', startDate);\n        if (startTime) params.append('startTime', startTime);\n        if (endDate) params.append('endDate', endDate);\n        if (endTime) params.append('endTime', endTime);\n\n        console.log('Fetching sensor data with params:', params.toString());\n        fetch(`${apiUrl}/sensorData/filter?${params.toString()}`)\n            .then((res) => res.json())\n            .then((result) => {\n                const grouped = {};\n                result.forEach((item) => {\n                    const timeStr = new Date(item.local).toLocaleString('en-GB', {\n                        hour12: false,\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        second: '2-digit',\n                    });\n                    if (!grouped[timeStr]) grouped[timeStr] = { time: timeStr };\n                    grouped[timeStr][item.sensor_id] = parseFloat(item.reading);\n                });\n                setData(Object.values(grouped));\n            })\n            .catch(console.error);\n    }, [startDate, startTime, endDate, endTime, selectedSensors, initialized, apiUrl]);\n\n    // Color palette for lines\n    const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#a4de6c'];\n\n    return (\n        <div style={{ width: '100%', height: 500 }}>\n            <div className=\"menuContainer\">\n                {/* Sensor Selection Section */}\n                <section className=\"section1\">\n                    <h4>Sensor Selection</h4>\n                    <div className=\"sensor-options\">\n                        {sensors.map((sensor) => (\n                            <label key={sensor.sensor_id}>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={selectedSensors.includes(sensor.sensor_id)}\n                                    onChange={() => toggleSensor(sensor.sensor_id)}\n                                />\n                                {sensor.name}\n                            </label>\n                        ))}\n                    </div>\n                </section>\n\n                {/* Date & Range Section */}\n                <section className=\"section2\">\n                    <h4>Date and Range</h4>\n                    <div className=\"range-selector\">\n                        <div>\n                            <label>Start Date:<input type=\"date\" value={startDate} onChange={e => setStartDate(e.target.value)} /></label>\n                            <label>Start Time:<input type=\"time\" step=\"300\" value={startTime} onChange={e => setStartTime(e.target.value)} /></label>\n                        </div>\n                        <div>\n                            <label>End Date:<input type=\"date\" value={endDate} onChange={e => setEndDate(e.target.value)} /></label>\n                            <label>End Time:<input type=\"time\" step=\"300\" value={endTime} onChange={e => setEndTime(e.target.value)} /></label>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Data Options Section */}\n                <section className=\"section3\">\n                    <h4>Data Options</h4>\n                    <button onClick={downloadCSV}>Download as CSV</button>\n                </section>\n            </div>\n\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data} margin={{ top: 20, right: 10, bottom: 80, left: 60 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" label={{ value: 'Local Time', position: 'bottom', offset: 20, style: { fontWeight: 'bold' } }} />\n                    <YAxis label={{ value: 'mag/arcsec²', angle: -90, position: 'insideLeft', dy: 50, style: { fontWeight: 'bold' } }} />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend verticalAlign=\"top\" />\n                    {sensors\n                        .filter((s) => selectedSensors.includes(s.sensor_id))\n                        .map((sensor, idx) => (\n                            <Line\n                                key={sensor.sensor_id}\n                                type=\"monotone\"\n                                dataKey={sensor.sensor_id}\n                                name={sensor.name}\n                                stroke={colors[idx % colors.length]}\n                                dot={false}\n                            />\n                        ))}\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default LineGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}