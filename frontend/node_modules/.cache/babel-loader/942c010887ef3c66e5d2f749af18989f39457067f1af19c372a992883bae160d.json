{"ast":null,"code":"var _jsxFileName = \"/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/MUILineGraph.js\",\n  _s = $RefreshSig$();\n// SensorLineChart.jsx\n\nimport React, { useEffect, useState } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport { LineChart } from \"@mui/x-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MUILineGraph = () => {\n  _s();\n  const [data, setData] = useState([]);\n\n  // Fetch sensor data from the server\n  const fetchSensorData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n      const result = await response.json();\n\n      // Sort data chronologically (oldest to newest)\n      const sortedData = result.sort((a, b) => new Date(a.utc) - new Date(b.utc));\n\n      // Map data into a format suitable for our chart.\n      // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n      const chartData = sortedData.map(point => ({\n        utc: point.utc,\n        reading: parseFloat(point.reading)\n      }));\n      setData(chartData);\n    } catch (error) {\n      console.error(\"Error fetching sensor data:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchSensorData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    xAxis: [{\n      data: [1, 2, 3, 5, 8, 10]\n    }],\n    series: [{\n      data: [2, 5.5, 2, 8.5, 1.5, 5]\n    }],\n    width: 500,\n    height: 300\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(MUILineGraph, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = MUILineGraph;\nexport default MUILineGraph;\nvar _c;\n$RefreshReg$(_c, \"MUILineGraph\");","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","LineChart","jsxDEV","_jsxDEV","MUILineGraph","_s","data","setData","fetchSensorData","response","fetch","result","json","sortedData","sort","a","b","Date","utc","chartData","map","point","reading","parseFloat","error","console","xAxis","series","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/connorvardakis/Documents/GitHub/ServerLightSensorCapstone/frontend/src/MUILineGraph.js"],"sourcesContent":["// SensorLineChart.jsx\n\nimport React, { useEffect, useState } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport { LineChart } from \"@mui/x-charts\"\n\n\nconst MUILineGraph = () => {\n    const [data, setData] = useState([]);\n\n    // Fetch sensor data from the server\n    const fetchSensorData = async () => {\n        try {\n            const response = await fetch(\"http://localhost:8000/sensorData/last12hours\");\n            const result = await response.json();\n\n            // Sort data chronologically (oldest to newest)\n            const sortedData = result.sort(\n                (a, b) => new Date(a.utc) - new Date(b.utc)\n            );\n\n            // Map data into a format suitable for our chart.\n            // Here, we assume each object has a \"utc\" (timestamp) and \"reading\" (string) property.\n            const chartData = sortedData.map((point) => ({\n                utc: point.utc,\n                reading: parseFloat(point.reading),\n            }));\n\n            setData(chartData);\n        } catch (error) {\n            console.error(\"Error fetching sensor data:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchSensorData();\n    }, []);\n\n    return (\n        <LineChart\n            xAxis={[{ data: [1, 2, 3, 5, 8, 10] }]}\n            series={[\n                {\n                    data: [2, 5.5, 2, 8.5, 1.5, 5],\n                },\n            ]}\n            width={500}\n            height={300}\n        />\n    );\n};\n\nexport default MUILineGraph;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,UAAU,QAAQ,eAAe;AAC/C,SAASC,SAAS,QAAQ,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8C,CAAC;MAC5E,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;MAEpC;MACA,MAAMC,UAAU,GAAGF,MAAM,CAACG,IAAI,CAC1B,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,GAAG,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,GAAG,CAC9C,CAAC;;MAED;MACA;MACA,MAAMC,SAAS,GAAGN,UAAU,CAACO,GAAG,CAAEC,KAAK,KAAM;QACzCH,GAAG,EAAEG,KAAK,CAACH,GAAG;QACdI,OAAO,EAAEC,UAAU,CAACF,KAAK,CAACC,OAAO;MACrC,CAAC,CAAC,CAAC;MAEHf,OAAO,CAACY,SAAS,CAAC;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAED3B,SAAS,CAAC,MAAM;IACZW,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA,CAACF,SAAS;IACNyB,KAAK,EAAE,CAAC;MAAEpB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;IAAE,CAAC,CAAE;IACvCqB,MAAM,EAAE,CACJ;MACIrB,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACjC,CAAC,CACH;IACFsB,KAAK,EAAE,GAAI;IACXC,MAAM,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA3CID,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AA6ClB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}